
# roll forward code compare results to baseline run and remove claims previously found
# do not ship case mix
# filter out low anomalies


 

setwd("~/BCBSLA")
library(sqldf)
library(plyr)
library(dplyr)
library(icd)
library(comorbidity)
library(dummies)
library(data.table)
library(ggplot2)
library(dataMaid)
library(lubridate)
library(NbClust)
library(cluster)
library(tidyr)
library(factoextra)
library(proxy)
library(tibble)
library(network)
# descriptive stats
library(Hmisc)
library(psych)

library(arules)
library(arulesViz)
library(visNetwork)
library(igraph)


library(h2o)
h2o.init()
########h2o.init(port=54322)
library(h2oEnsemble)

#h2o.shutdown(prompt  = FALSE)

library(RODBC)


conn = odbcDriverConnect(
  'DRIVER={ODBCSQLSvr};SERVER=dbswp0627.aimhealth.com;DATABASE=racer01138;UID=COBUnixToSQL;PWD=COBUn!xT0Sql'
)

#table_listing <- as.data.frame(sqlTables(conn))

#table_listing <- sqldf("select * from table_listing where TABLE_SCHEM = 'dbo' order by TABLE_NAME")

#claim <- sqlColumns(conn, "dbo.ICD9"  )
#claim <- sqlColumns(conn, "dbo.CLAIM"  )


#library(h2o)
#h2o.init()



claims_line_180 <- sqlQuery(
  conn,
  " select L.CLAIM_LINE_ID,
  L.CLAIM_ID,
  CLM.CLAIM_NO,
  L.PROJECT_ID,
  L.LINE_NO,
  L.FEED_ID,
  L.DATE_OF_SERVICE_BEG,
  L.DATE_OF_SERVICE_END,
  CLM.DATE_OF_SERVICE_BEG as DATE_OF_SERVICE_BEG_CLAIM,
  CLM.DATE_OF_SERVICE_END as DATE_OF_SERVICE_END_CLAIM,
  CLM.BILL_TYPE,
  CLM.PLACE_OF_SERVICE,
  L.CPT,
  L.CPT_MODIFIER,
  L.UNITS_BILLED,
  L.UNITS_ALLOWED,
  L.REVENUE_CODE,
  L.AMT_PAID
  FROM dbo.CLAIM_LINE L, dbo.CLAIM CLM
  WHERE L.CLAIM_ID = CLM.CLAIM_ID
  AND L.PROJECT_ID = 1138
  AND L.AMT_PAID  > 0
AND CLM.DATE_PAID >= '09-01-2015'
AND CLM.DATE_PAID <= '10-30-2018'
  AND L.CPT Like '%J%'
  ")

# remove human FACTOR

claims_line_180 <- sqldf("select * from claims_line_180 where CPT not in ('J7177', 'J7178', 'J7179', 'J7180', 
                                                           'J7181', 'J7182', 'J7183', 'J7184',
                                                           'J7185', 'J7186', 'J7187', 'J7188',
                                                           'J7189', 'J7190', 'J7191', 'J7192',
                                                           'J7193', 'J7194', 'J7195', 'J7196',
                                                           'J7197', 'J7198', 'J7199', 'J7200',
                                                           'J7201', 'J7202', 'J7203', 'J7204',
                                                           'J7205', 'J7206', 'J7207', 'J7208',
                                                           'J7209', 'J7210', 'J7211')")


jcode_cnt <- sqldf("select CPT,  CLAIM_NO, count(CLAIM_NO) as jcnt, sum(AMT_PAID) as paid,
                   sum(UNITS_BILLED) as billed_units
                   from claims_line_180
                   group by CPT, CLAIM_NO
                   order by CPT")



jcode_cnt2 <- jcode_cnt
jcode_cnt2$CLAIM_NO <- NULL

# jcode claim line descriptives

jcode_descriptives <- as.data.frame(describeBy(jcode_cnt2,
                                               group = list(jcode_cnt2$CPT), 
                                               mat=TRUE))

jcode_descriptives_pd <- sqldf("select * from jcode_descriptives where vars = 3
                            order by mean desc")

jcode_descriptives_vol <- sqldf("select * from jcode_descriptives where vars = 2
                            order by n desc")

jcode_descriptives_units <- sqldf("select * from jcode_descriptives where vars = 4
                            order by n desc")

jcode_descriptives2 <- sqldf("select v.group1 as CPT, v.n as num_admins, 
                             v.mean as mean_num_admins, p.mean as mean_pd, u.mean as mean_units,
                             v.median as median_num_admins, p.median as median_pd, u.median as median_units,
                             v.min as min_num_admins, v.max as max_num_admins, 
                             p.min as min_pd, p.max as max_pd,
                             u.min as min_units, u.max as max_units
                             from jcode_descriptives_pd p, jcode_descriptives_vol v, jcode_descriptives_units u
                             where v.group1 = p.group1
                             and v.group1 = u.group1
                             order by mean_pd desc")





# time between administrations

# Added 1 to days so could convert NAs to 0




# jcode_time <- claims_line_180 %>%
#   arrange( CLAIM_ID, CPT,DATE_OF_SERVICE_BEG_CLAIM) %>%
#   group_by(CLAIM_ID) %>%
#   mutate(diff = DATE_OF_SERVICE_BEG_CLAIM - lag(DATE_OF_SERVICE_END_CLAIM),
#          days_between_admins = as.numeric(diff, units = 'days'))          

# jcode_time$days_between_admins <- ifelse(is.na(jcode_time$days_between_admins),
#                                          0, jcode_time$days_between_admins + 1)
# 
# 
# 
# 
# 
# 
# jcode_time2 <- sqldf("select CPT,  days_between_admins
#                    from jcode_time
#                   ")
# 
# jcode_time_descriptives <- as.data.frame(describeBy(jcode_time2,
#                                                group = list(jcode_time2$CPT), 
#                                                mat=TRUE))
# 
# jcode_descriptives_time <- sqldf("select * from jcode_time_descriptives where vars = 2
#                             order by n desc")


# 
# jcode_descriptives2 <- sqldf("select v.group1 as CPT, v.n as num_admins, 
#                              v.mean as mean_num_admins, p.mean as mean_pd, u.mean as mean_units, t.mean as mean_days,
#                              v.median as median_num_admins, p.median as median_pd, u.median as median_units, t.median as median_days,
#                              v.min as min_num_admins, v.max as max_num_admins,t.max as max_days, 
#                              p.min as min_pd, p.max as max_pd,
#                              u.min as min_units, u.max as max_units
#                              from jcode_descriptives_pd p, jcode_descriptives_vol v,
#                              jcode_descriptives_units u, jcode_descriptives_time t
#                              where v.group1 = p.group1
#                              and v.group1 = u.group1
#                              and v.group1 = t.group1
#                              order by mean_pd desc")


#jcode_descriptives2$total_paid <- jcode_descriptives2$num_admins * jcode_descriptives2$mean_pd

# calcualte deciles
jcode_descriptives2 <- mutate(jcode_descriptives2, 
                              total_paid_rank = ntile(jcode_descriptives2$median_pd, 10))


jcode_descriptives2 <- mutate(jcode_descriptives2, 
                              total_admins_rank = ntile(jcode_descriptives2$median_num_admins, 10))


high_dol_vol <- sqldf("select * from jcode_descriptives2 where
total_paid_rank = 10 
and  total_admins_rank >= 6")



# clustering rather than deciles

data_2_cluster <- sqldf("select median_num_admins, median_pd from jcode_descriptives2 ")

data_2_cluster2 <- scale(data_2_cluster)

nb <- NbClust(data_2_cluster2, diss = NULL, distance = "euclidean",
              min.nc = 2, max.nc = 7, method = "kmeans",
              index = "all", alphaBeale = 0.1)

hist(nb$Best.nc[1,], breaks = max(na.omit(nb$Best.nc[1,])))


km <- kmeans(data_2_cluster2, centers = 5, nstart = 25)
fviz_cluster (km, data =data_2_cluster2 , pointsize = 0.5, labelsize = 2, main = "Clusters of Paid Amount and Number Claims Normalized")

# extract cluster assignment vector from the kmeans model
clust_km <- km$cluster
centers <- as.data.frame(km$centers)
# add cluster to dataframe
jcode_descriptives3 <- mutate(jcode_descriptives2, cluster = clust_km)


centers<- data.frame(cluster = row.names(centers), centers)

admin_cluster <- sqldf("select cluster, max(median_num_admins) as max_a from centers")

centers <- sqldf("select cluster, median_pd from centers order by median_pd desc")

# combine top 2 clusters in median paid into one
dol_clust <-centers  %>% slice(1:2)


cluster1 <- as.vector(admin_cluster[,1])
bigcluster <- as.vector(dol_clust[2,1])
cluster2a <-  as.data.frame(as.vector(dol_clust[1,1]))
cluster2b <-  as.data.frame(as.vector(dol_clust[2,1]))

names(cluster2a)[1] <- "CL_HIGH"
names(cluster2b)[1] <- "CL_SEC"

cluster2a <- cbind(cluster2a, cluster2b)

jcode_descriptives4 <- cbind(jcode_descriptives3, cluster2a)


jcode_descriptives4$cluster2 <- ifelse(jcode_descriptives4$cluster == jcode_descriptives4$CL_HIGH, 
                                       bigcluster, jcode_descriptives4$cluster )

jcode_descriptives4$cluster <- jcode_descriptives3$cluster2
jcode_descriptives4$CL_HIGH <- NULL
jcode_descriptives4$CL_SEC <- NULL
jcode_descriptives4$cluster2 <- NULL
jcode_descriptives3 <- jcode_descriptives4


# 420 day retrospective analysis



claims_420a  <- sqlQuery(
  conn,
  " select L.CLAIM_LINE_ID,
  L.CLAIM_ID,
  CLM.CLAIM_NO,
  CLM.PATIENT_ID,
  L.PROJECT_ID,
  L.LINE_NO,
  L.FEED_ID,
  L.DATE_OF_SERVICE_BEG,
  L.DATE_OF_SERVICE_END,
  CLM.DATE_OF_SERVICE_BEG as DATE_OF_SERVICE_BEG_CLAIM,
  CLM.DATE_OF_SERVICE_END as DATE_OF_SERVICE_END_CLAIM,
  CLM.BILL_TYPE,
  CLM.PLACE_OF_SERVICE,
  L.CPT,
  L.CPT_MODIFIER,
  L.UNITS_BILLED,
  L.UNITS_ALLOWED,
  L.REVENUE_CODE,
  L.AMT_PAID,
  CLM.DATE_PAID
  FROM dbo.CLAIM_LINE L, dbo.CLAIM CLM
  WHERE L.CLAIM_ID = CLM.CLAIM_ID
  AND L.PROJECT_ID = 1138
  AND L.AMT_PAID  > 0
  AND L.CPT Like '%J%'
AND CLM.DATE_PAID >= '09-01-2015'
  AND CLM.DATE_PAID <= '10-30-2018'
AND L.FEED_ID <= 43
  ")


# below is for only looking at claims within 420 of last paid date apply after 3 year retreval

# date_ranges <- sqldf( "select CLAIM_NO,
#                        max(DATE_PAID) as max_pd_date
#                        from claims_420a
#                        group by CLAIM_NO")
# 
# 
# date_ranges$max_pd_date <-as.POSIXct(date_ranges$max_pd_date, origin ="1970-01-01")
# 

# 420 days from last paid date
# date_ranges$base_date <- ymd(date_ranges$max_pd_date) - 420
# 
# 
# 
# claims_420a <- sqldf("select a.*, d.max_pd_date from claims_420a a, date_ranges d
#                      where a.CLAIM_NO = d.CLAIM_NO
#                      and a.DATE_PAID BETWEEN d.base_date and d.max_pd_date")
# 


                    
# change bill type code NA to 0
claims_420a$BILL_TYPE <- ifelse(is.na(claims_420a$BILL_TYPE), 0, claims_420a$BILL_TYPE)
claims_420a$BILL_TYPE <- as.factor(claims_420a$BILL_TYPE)

# place of service
claims_420a$PLACE_OF_SERVICE<- ifelse(is.na(claims_420a$PLACE_OF_SERVICE), 0, 
                                      claims_420a$PLACE_OF_SERVICE)
claims_420a$PLACE_OF_SERVICE<- as.factor(claims_420a$PLACE_OF_SERVICE)

claims_420a$CPT_MODIFIER <- ifelse(is.na(claims_420a$CPT_MODIFIER), 'none', claims_420a$CPT_MODIFIER)

claims_420a$REVENUE_CODE <- ifelse(is.na(claims_420a$REVENUE_CODE), 0, claims_420a$REVENUE_CODE)
claims_420a$REVENUE_CODE <- as.factor(claims_420a$REVENUE_CODE)

# filter for jcodes in cluster 3



claims_420b_string <- paste0("select  CPT from jcode_descriptives3
                             where cluster  = '",cluster1,"'")

claims_420b <- sqldf(claims_420b_string)


c4_ids <- sqldf("select distinct CLAIM_ID from cluster4_j_claims")


#claimline <- sqlColumns(conn, "dbo.CLAIM_LINE"  )
#icdtable <- sqlColumns(conn, "dbo.ICD9"  )

# for CCS groups
# changed to top 10

DX_claim  <- sqlQuery(
  conn,
  " select
  DX.CLAIM_ID,
  DX.ICD9_CODE,
  DX.ICD9_TYPE,
  DX.CLAIM_LINE_ID,
  DX.FEED_ID,
CLM.DATE_PAID
  FROM  dbo.ICD9 DX, dbo.CLAIM CLM
  WHERE DX.CLAIM_ID = CLM.CLAIM_ID
  AND  DX.ORDER_IN_CLAIM <= 4
  AND CLM.DATE_PAID >= '09-01-2015'
AND CLM.DATE_PAID <= '10-30-2018'")


dxid <- sqldf("select distinct CLAIM_ID from claims_420a")

DX_claim  <- sqldf ("select  d.* from DX_claim d, dxid j
                    where j.CLAIM_ID = d.CLAIM_ID")




DX_claim$ICD9_CODE <- gsub(".","",DX_claim$ICD9_CODE, fixed = TRUE)

CCS_lookup <- read.csv("ccs_dx_icd10cm_2018_1.csv", sep = ",",  quote = "\"", header = TRUE)
CCSdesc <- read.csv("CCSdesc.csv", sep = ",",  quote = "\"", header = TRUE)


# rename columns
CCS_lookup$ICD9_CODE <- CCS_lookup$X.ICD.10.CM.CODE.


# in version 9 used CCS rollup

CCS_lookup$CCS_DX <- CCS_lookup$X.MULTI.CCS.LVL.1.
CCS_lookup[] <- lapply(CCS_lookup, function(x) sub("[']","",x))
CCS_lookup[] <- lapply(CCS_lookup, function(x) sub("[']","",x))



# rename CCS col names

CCS_lookup$multi_code <-  CCS_lookup$X.MULTI.CCS.LVL.1.
CCS_lookup$multi_desc <- CCS_lookup$X.MULTI.CCS.LVL.1.LABEL.
CCS_lookup$multi_desc <- NULL

CCS_lookup <- sqldf("select c.* , d.multi_desc from CCS_lookup c, CCSdesc d
                    where c.multi_code= d.multi_code")



CCS_lookup$multi_code <- paste("CCS__",CCS_lookup$multi_code )


ccs_cols <- sqldf("select distinct multi_code, multi_desc from CCS_lookup")



DX_claim  <- sqldf("select  d.* from DX_claim d
                   where  d.ICD9_TYPE='DIAG10'")

icd2 <- sqldf("select i.*, c.multi_desc from DX_claim  i,CCS_lookup c where i.ICD9_CODE = c.ICD9_CODE ")

icd2$ICD9_TYPE <- NULL
icd2$ADMITTING_CODE <- NULL
icd2$PRINCIPAL_CODE <- NULL
icd2$CLAIM_LINE_ID <- NULL
icd2$ORDER_IN_CLAIM <- NULL
icd2$FEED_ID <-NULL

claims_420a_id <- sqldf ("select  CLAIM_ID from claims_420a group by CLAIM_ID")

icd2 <- sqldf("select i.* from icd2  i,claims_420a_id c where i.CLAIM_ID = c.CLAIM_ID ")


# cluster 3
cluster4_j_claims_string <- paste0("select  c.* from claims_420a c
                           where c.CPT IN (select CPT from jcode_descriptives3 where cluster = '",cluster1,"')")

cluster4_j_claims <- sqldf(cluster4_j_claims_string)


c4_ids <- sqldf("select distinct CLAIM_ID from cluster4_j_claims")

icd_C4_1 <- sqldf("select i.* from icd2  i,c4_ids c where i.CLAIM_ID = c.CLAIM_ID  order by CLAIM_ID")


CCS_Dummy_test <- sqldf("select distinct CLAIM_ID, multi_desc from icd_C4_1")


CCS_Dummy_test <- cbind(CCS_Dummy_test, dummy(CCS_Dummy_test$multi_desc , sep= "_"))
# replace with CCS
colnames(CCS_Dummy_test) <- (gsub("CCS_Dummy_test_", "",  colnames(CCS_Dummy_test)))
# group by client id
CCS_Dummy2_test <- CCS_Dummy_test %>% group_by(CLAIM_ID) %>% summarise_if(is.numeric, sum)

# temporarialy make claim id text
CCS_Dummy2_test$CLAIM_ID <- as.character(CCS_Dummy2_test$CLAIM_ID)

# recode if > 0 then 1 else 0 instead of summing dummies
CCS_Dummy3_test <- CCS_Dummy2_test %>% mutate_if(is.numeric,
                                                 function(x) case_when(
                                                   x >= 1 ~ 1,
                                                   x == 0 ~ 0
                                                 )
)

CCS_Dummy3_test <- CCS_Dummy3_test %>% mutate_if(is.numeric, funs(factor(.)))
CCS_Dummy3_test$CLAIM_ID <- as.numeric(CCS_Dummy3_test$CLAIM_ID)
CCS_Dummy3_test$multi_desc <- NULL
CCS_Dummy3_test <- sqldf("select * from CCS_Dummy3_test order by CLAIM_ID")
CCS_Dummy3_test$CLAIM_IDx <-CCS_Dummy3_test$CLAIM_ID
CCS_Dummy3_test$CLAIM_ID <- NULL


icd_C4_2 <- CCS_Dummy3_test 



cluster4_j_claims2 <- sqldf ("select CLAIM_ID, PATIENT_ID,  BILL_TYPE,CPT_MODIFIER,REVENUE_CODE,
                             PLACE_OF_SERVICE, CPT, UNITS_BILLED, AMT_PAID
                             from cluster4_j_claims
                             order by CPT")

# merge CCS to J codes
# the older claims have ICD9 codes do inner join


cluster4_j_claims2 <- sqldf ("select j.*, i.* from   cluster4_j_claims2 j INNER join icd_C4_2 i
                            ON j.CLAIM_ID = i.CLAIM_IDX")

cluster4_j_claims2$CLAIM_IDx <- NULL

cluster4_j_claims2$CPT <- as.factor(cluster4_j_claims2$CPT)
cluster4_j_claims2$CPT_MODIFIER <- as.factor(cluster4_j_claims2$CPT_MODIFIER)
cluster4_j_claims2$REVENUE_CODE <- as.factor(as.character(cluster4_j_claims2$REVENUE_CODE))




# anomalies


outlier <- data.frame(matrix(ncol = 27, nrow = 0))
outlier_columns <- c('PATIENT_ID', 'BILL_TYPE', 'CPT_MODIFIER', 'REVENUE_CODE','CLAIM_ID',
                     'PLACE_OF_SERVICE', 'CPT', 'UNITS_BILLED','AMT_PAID', 'Congenital_anomalies',
                     'Diseases_of_the_blood', 'Diseases_of_the_circulatory_system',
                     'Diseases_of_the_digestive_system', 'Diseases_of_the_genitourinary_system', 
                     'Diseases_of_the_musculoskeletal_system_and_connective_tissue', 
                     'Diseases_of_the_nervous_system_and_sense_organs', 
                     'Diseases_of_the_respiratory_system', 
                     'Diseases_of_the_skin_and_subcutaneous_tissue', 
                     'Endocrine_metabolic_diseases_immunity_disorder', 
                     'Infectious_and_parasitic_diseases', 'Injury_and_poisoning',
                     'Mental_Illness', 'Neoplasms', 'Residual_codes', 'Symptoms_signs',
                     'CLUSTER', 'Reconstruction.MSE')

outlier_temp <- data.frame(matrix(ncol = 27, nrow = 0))
colnames(outlier) <- outlier_columns
colnames(outlier_temp) <- outlier_columns

# dummy table structure to pull from base data so that all CCS codes are included in
# data pull
dummy_col_names <-  c('PATIENT_ID', 'BILL_TYPE', 'CPT_MODIFIER', 'REVENUE_CODE','CLAIM_ID',
                      'PLACE_OF_SERVICE', 'CPT', 'UNITS_BILLED','AMT_PAID', 'Congenital_anomalies',
                      'Diseases_of_the_blood', 'Diseases_of_the_circulatory_system',
                      'Diseases_of_the_digestive_system', 'Diseases_of_the_genitourinary_system', 
                      'Diseases_of_the_musculoskeletal_system_and_connective_tissue', 
                      'Diseases_of_the_nervous_system_and_sense_organs', 
                      'Diseases_of_the_respiratory_system', 
                      'Diseases_of_the_skin_and_subcutaneous_tissue', 
                      'Endocrine_metabolic_diseases_immunity_disorder', 
                      'Infectious_and_parasitic_diseases', 'Injury_and_poisoning',
                      'Mental_Illness', 'Neoplasms', 'Residual_codes', 'Symptoms_signs')

ccsnames <- c('Congenital_anomalies',
              'Diseases_of_the_blood', 'Diseases_of_the_circulatory_system',
              'Diseases_of_the_digestive_system', 'Diseases_of_the_genitourinary_system', 
              'Diseases_of_the_musculoskeletal_system_and_connective_tissue', 
              'Diseases_of_the_nervous_system_and_sense_organs', 
              'Diseases_of_the_respiratory_system', 
              'Diseases_of_the_skin_and_subcutaneous_tissue', 
              'Endocrine_metabolic_diseases_immunity_disorder', 
              'Infectious_and_parasitic_diseases', 'Injury_and_poisoning',
              'Mental_Illness', 'Neoplasms', 'Residual_codes', 'Symptoms_signs')


fnames <- c( 'BILL_TYPE', 'CPT_MODIFIER', 'REVENUE_CODE','CLAIM_ID',
            'PLACE_OF_SERVICE', 'CPT')

intnames <- c('PATIENT_ID', 'CLAIM_ID',
               'UNITS_BILLED','AMT_PAID')

numnames <- c('AMT_PAID')


dummy_pull <- data.frame(matrix(ncol = 25, nrow = 1))
colnames(dummy_pull) <- dummy_col_names


dummy_pull[ccsnames] <- lapply(dummy_pull[ccsnames], as.factor)
dummy_pull[is.na(dummy_pull)] <-0
dummy_pull[fnames] <- lapply(dummy_pull[fnames], as.factor)
dummy_pull[is.na(dummy_pull)] <-0
dummy_pull[intnames] <- lapply(dummy_pull[intnames], as.integer)
dummy_pull[numnames] <- lapply(dummy_pull[numnames], as.numeric)



dummy_pull[setdiff(names(cluster4_j_claims2), names(dummy_pull))] <- NA
cluster4_j_claims2[setdiff(names(dummy_pull), names(cluster4_j_claims2))] <- NA


cluster4_j_claims2 <- rbind( dummy_pull,cluster4_j_claims2)
cluster4_j_claims2 <- sqldf("select  * from cluster4_j_claims2 where CPT != '0'")


jid <- sqldf("select distinct CPT from cluster4_j_claims2")
#jid <- sqldf("select distinct CPT from cluster4_j_claims2 where CPT = 'J1290'")


for (i in rownames(jid))
{
  jid_loop <- jid[i, ]
  
  j_string <- paste0("select PATIENT_ID, BILL_TYPE, CPT_MODIFIER, REVENUE_CODE,CLAIM_ID,
                     PLACE_OF_SERVICE, CPT, UNITS_BILLED, AMT_PAID, Congenital_anomalies,
                     Diseases_of_the_blood, Diseases_of_the_circulatory_system,
                     Diseases_of_the_digestive_system, Diseases_of_the_genitourinary_system, 
                     Diseases_of_the_musculoskeletal_system_and_connective_tissue, 
                     Diseases_of_the_nervous_system_and_sense_organs, 
                     Diseases_of_the_respiratory_system, 
                     Diseases_of_the_skin_and_subcutaneous_tissue, 
                     Endocrine_metabolic_diseases_immunity_disorder, 
                     Infectious_and_parasitic_diseases, Injury_and_poisoning,
                     Mental_Illness, Neoplasms, Residual_codes, Symptoms_signs
                      from cluster4_j_claims2
                   where CPT = '",jid_loop,"'")
  
  an0 <- sqldf(j_string)
  # remnove columns that all NA from dummy
  an0[sapply(an0, function(x) all(is.na(x)))] <- NULL

  an1 <- an0
  an1$PATIENT_ID <- NULL
  an1$AMT_PAID <- NULL
  an1$CLAIM_ID <- NULL
  
 
  # remove columns with all constant
   an1 <- an1[sapply(an1, function(x) length(unique(na.omit(x)))) >1]
  # only run anomoly if have 3+ columns non constant
  if(NCOL(an1) >= 3) {
   
  
    learnname <- colnames(an1) 
    
    an1_h2o <- as.h2o(an1)
    
    an1_h2o_dl <- h2o.deeplearning(x = learnname, training_frame = an1_h2o, autoencoder = TRUE, 
                                   hidden = c(10,2,10), epochs = 100, stopping_tolerance = 1e-4, activation = "Tanh",
                                   categorical_encoding = "AUTO")
    
    
    an1_h2o_dl2 = h2o.anomaly(an1_h2o_dl, an1_h2o)
    an1_h2o_dl2 <- as.data.frame(an1_h2o_dl2)
    
    
    outlier <- cbind(an0, an1_h2o_dl2)
    
    outlier <- data.frame(r_index = row.names(outlier), outlier)
    outlier$CLUSTER <- cluster1
    outlier_temp<- bind_rows(outlier, outlier_temp)
    
                         
  }
  
}

###############################################
# claim line outlier Mahalnobis

outlier_temp$MSE <- outlier_temp$Reconstruction.MSE


# from mississippi medicaid  fee schedule
jcode_max_units <- read.csv("CMS_Jcode_max_units.csv", sep = ",",  quote = "\"", header = TRUE)



# add CMS max
outlier_temp <- sqldf("select  f.*, c.Max_Units from outlier_temp f INNER JOIN jcode_max_units c
                ON f.CPT = c.Code")

# add median from baseline


outlier_temp <- sqldf("select  f.*, c.median as BaseLine_Median_Units from outlier_temp f INNER JOIN jcode_descriptives_units c
                ON f.CPT = c.group1")


outlier_temp$baseline_units_ratio <- outlier_temp$UNITS_BILLED / outlier_temp$BaseLine_Median_Units
outlier_temp$baseline_units_delta <- outlier_temp$UNITS_BILLED - outlier_temp$BaseLine_Median_Units


# drugs discontiued or not covered by CMS are 0 add 0.01 so can do ratio
outlier_temp$CMS_units_ratio <- ifelse(outlier_temp$Max_Units != 0, outlier_temp$UNITS_BILLED / outlier_temp$Max_Units,
                                       0)
outlier_temp$CMS_units_delta <- ifelse(outlier_temp$Max_Units != 0, outlier_temp$UNITS_BILLED - outlier_temp$Max_Units,
                                       0)
  
distance1 <- sqldf("select AMT_PAID,MSE,CMS_units_ratio from  outlier_temp")
distance1 <- scale(distance1)

# Mahalanobis from psych package
distance2 <- as.data.frame(outlier(distance1, plot = FALSE, bad = 5, xlab,ylab))
names(distance2)[1] <- "Mahalanobis"
outlier_temp2 <- cbind(outlier_temp,distance2)


pd_dates  <- sqlQuery(
  conn,
  " select DISTINCT
  L.CLAIM_ID,
  CLM.DATE_PAID
  FROM dbo.CLAIM_LINE L, dbo.CLAIM CLM
  WHERE L.CLAIM_ID = CLM.CLAIM_ID
  AND L.PROJECT_ID = 1138
  AND L.AMT_PAID  > 0
  AND L.CPT Like '%J%'
  AND CLM.DATE_PAID >= '01-05-2018' ")


# add add paid date filter on 420 days last paid --- for hx data hard coded to 1/5/18
outlier_temp2<- sqldf ("select o.* , c.DATE_PAID from outlier_temp2 o,pd_dates c
               where  o.CLAIM_ID = c.CLAIM_ID")


outlier_temp2 <- mutate(outlier_temp2, 
                    Mahalanobis_rank = ntile(outlier_temp2$Mahalanobis, 10))
outlier_temp2$Reconstruction.MSE <- NULL


outlier_temp2$Units_Anomaly <- ifelse((outlier_temp2$Mahalanobis_rank >= 8 ),
                                         1, 0)

# these are units above CMS or above median of sample
outlier_temp3_unit_hits_high <- sqldf("select * from outlier_temp2 where Units_Anomaly = 1
                                 order by Mahalanobis_rank DESC")
# flag for above and below benchmarks
outlier_temp3_unit_hits_high$above_benchmarks <-1
# these are below CMS and baseline but scorredd high mahalobious and anomoly

outlier_temp3_unit_hits_low <- sqldf("select * from outlier_temp2 where Units_Anomaly = 0

                                 order by Mahalanobis_rank DESC")

outlier_temp3_unit_hits_low$above_benchmarks <-0
outlier_temp3 <- rbind(outlier_temp3_unit_hits_high,outlier_temp3_unit_hits_low )



outlier_temp3_unit_hits_high$r_index <- NULL
Cluster4_claim_line_summary_df <- sqldf("select distinct * from  outlier_temp3_unit_hits_high
                                   order by Mahalanobis desc")

Cluster4_claim_line_summary_df[is.na(Cluster4_claim_line_summary_df)] <- 0






outlier_temp3_case_mix_hits <- sqldf("select * from outlier_temp2 where Units_Anomaly = 0
                                  
                                 order by Mahalanobis_rank DESC")


# Anomaly for non unit hit anaomaly -- group by claim and total the amount of units


claim_level0 <- sqldf("select CLAIM_ID, CPT, sum(UNITS_BILLED) as total_units, sum(AMT_PAID) as total_claim_pd
              from outlier_temp2
              group by CLAIM_ID, CPT")
 


claim_level1 <- sqldf("select  PATIENT_ID, BILL_TYPE, CPT_MODIFIER, REVENUE_CODE,CLAIM_ID,
                      PLACE_OF_SERVICE, CPT,  Congenital_anomalies,
                      Diseases_of_the_blood, Diseases_of_the_circulatory_system,
                      Diseases_of_the_digestive_system, Diseases_of_the_genitourinary_system, 
                      Diseases_of_the_musculoskeletal_system_and_connective_tissue, 
                      Diseases_of_the_nervous_system_and_sense_organs, 
                      Diseases_of_the_respiratory_system, 
                      Diseases_of_the_skin_and_subcutaneous_tissue, 
                      Endocrine_metabolic_diseases_immunity_disorder, 
                      Infectious_and_parasitic_diseases, Injury_and_poisoning,
                      Mental_Illness, Neoplasms, Residual_codes, Symptoms_signs,
                      Max_Units, CLUSTER, Units_Anomaly, Mahalanobis_rank
                      from outlier_temp2")

claim_level1 <- sqldf("select  c.*, s.total_units, s.total_claim_pd 
                      from claim_level1 c, claim_level0 s
                      where c.CLAIM_ID = s.CLAIM_ID
                      AND c.CPT = s.CPT
                      and c.Units_Anomaly = 0
                     ")

#####################################################################

jcode_descriptives <- as.data.frame(describeBy(claim_level1,
                                               group = list(claim_level1$CPT), 
                                               mat=TRUE))

jcode_descriptives_pd <- sqldf("select * from jcode_descriptives where vars = 3
                               order by mean desc")

jcode_descriptives_vol <- sqldf("select * from jcode_descriptives where vars = 2
                                order by n desc")

jcode_descriptives_units <- sqldf("select * from jcode_descriptives where vars = 4
                                  order by n desc")

jcode_descriptives2 <- sqldf("select v.group1 as CPT, v.n as num_admins, 
                             v.mean as mean_num_admins, p.mean as mean_pd, u.mean as mean_units,
                             v.median as median_num_admins, p.median as median_pd, u.median as median_units,
                             v.min as min_num_admins, v.max as max_num_admins, 
                             p.min as min_pd, p.max as max_pd,
                             u.min as min_units, u.max as max_units
                             from jcode_descriptives_pd p, jcode_descriptives_vol v, jcode_descriptives_units u
                             where v.group1 = p.group1
                             and v.group1 = u.group1
                             order by mean_pd desc")


#####################################################################
# claim level anomolies

# remove fields for anomaly run


outlier_b <- data.frame(matrix(ncol = 27, nrow = 0))
outlier_columns <- c('PATIENT_ID', 'BILL_TYPE', 'CPT_MODIFIER', 'REVENUE_CODE','CLAIM_ID',
                     'PLACE_OF_SERVICE', 'CPT', 'total_units', 'total_claim_pd', 'Congenital_anomalies',
                     'Diseases_of_the_blood', 'Diseases_of_the_circulatory_system',
                     'Diseases_of_the_digestive_system', 'Diseases_of_the_genitourinary_system', 
                     'Diseases_of_the_musculoskeletal_system_and_connective_tissue', 
                     'Diseases_of_the_nervous_system_and_sense_organs', 
                     'Diseases_of_the_respiratory_system', 
                     'Diseases_of_the_skin_and_subcutaneous_tissue', 
                     'Endocrine_metabolic_diseases_immunity_disorder', 
                     'Infectious_and_parasitic_diseases', 'Injury_and_poisoning',
                     'Mental_Illness', 'Neoplasms', 'Residual_codes', 'Symptoms_signs',
                     'CLUSTER', 'Reconstruction.MSE')

outlier_temp_b <- data.frame(matrix(ncol = 27, nrow = 0))
colnames(outlier_b) <- outlier_columns
colnames(outlier_temp_b) <- outlier_columns


# anomaly temp files
outlier_b_an <- data.frame(matrix(ncol = 37, nrow = 0))
outlier_columns_an <- c('PATIENT_ID', 'BILL_TYPE', 'CPT_MODIFIER', 'REVENUE_CODE','CLAIM_ID',
                        'PLACE_OF_SERVICE', 'CPT', 'total_units', 'total_claim_pd', 'Congenital_anomalies',
                        'Diseases_of_the_blood', 'Diseases_of_the_circulatory_system',
                        'Diseases_of_the_digestive_system', 'Diseases_of_the_genitourinary_system', 
                        'Diseases_of_the_musculoskeletal_system_and_connective_tissue', 
                        'Diseases_of_the_nervous_system_and_sense_organs', 
                        'Diseases_of_the_respiratory_system', 
                        'Diseases_of_the_skin_and_subcutaneous_tissue', 
                        'Endocrine_metabolic_diseases_immunity_disorder', 
                        'Infectious_and_parasitic_diseases', 'Injury_and_poisoning',
                        'Mental_Illness', 'Neoplasms', 'Residual_codes', 'Symptoms_signs',
                        'CLUSTER', 'Reconstruction.MSE',
                        'LHS', 'RHS', 'support', 'confidence','lift', 'count', 'tot_rules',
                        'Jaccard_rank', 'case_mix_MSE', 'Anomaly_rank')

outlier_temp_b_an <- data.frame(matrix(ncol = 37, nrow = 0))
colnames(outlier_b_an) <- outlier_columns_an
colnames(outlier_temp_b_an) <- outlier_columns_an


jid <- sqldf("select distinct CPT from claim_level1 ")





for (i in rownames(jid))
{
  jid_loop <- jid[i, ]
  
  j_string <- paste0("select PATIENT_ID, BILL_TYPE, CPT_MODIFIER, REVENUE_CODE,CLAIM_ID,
                     PLACE_OF_SERVICE, CPT, total_units, total_claim_pd, Congenital_anomalies,
                     Diseases_of_the_blood, Diseases_of_the_circulatory_system,
                     Diseases_of_the_digestive_system, Diseases_of_the_genitourinary_system, 
                     Diseases_of_the_musculoskeletal_system_and_connective_tissue, 
                     Diseases_of_the_nervous_system_and_sense_organs, 
                     Diseases_of_the_respiratory_system, 
                     Diseases_of_the_skin_and_subcutaneous_tissue, 
                     Endocrine_metabolic_diseases_immunity_disorder, 
                     Infectious_and_parasitic_diseases, Injury_and_poisoning,
                     Mental_Illness, Neoplasms, Residual_codes, Symptoms_signs
                     from claim_level1
                     where CPT = '",jid_loop,"'")
  
  an0 <- sqldf(j_string)
  
  # remnove columns that all NA from dummy
  an0[sapply(an0, function(x) all(is.na(x)))] <- NULL
  
  an1 <- an0
  an1$PATIENT_ID <- NULL
  an1$total_claim_pd <- NULL
  an1$CLAIM_ID <- NULL
  an1$Units_Anomaly <- NULL
  an1$Max_Units <- NULL
  an1$total_claim_pd <- NULL
  
  # remove columns with all constant
  an1 <- an1[sapply(an1, function(x) length(unique(na.omit(x)))) >1]
  
  if(NCOL(an1) >= 3) {
    
    learnname <- colnames(an1)
    
    an1_h2o <- as.h2o(an1)
    
    an1_h2o_dl <- h2o.deeplearning(x = learnname, training_frame = an1_h2o, autoencoder = TRUE, 
                                   hidden = c(10,2,10), epochs = 100, stopping_tolerance = 1e-4, activation = "Tanh",
                                   categorical_encoding = "AUTO")
    
    
    an1_h2o_dl2 = h2o.anomaly(an1_h2o_dl, an1_h2o)
    #head(an1_h2o_dl2 )
    
    an1_h2o_dl2 <- as.data.frame(an1_h2o_dl2)
    #plot(sort(an1_h2o_dl2$Reconstruction.MSE), main=i)
    
    outlier_b <- cbind(an0, an1_h2o_dl2)
    
    outlier_b <- data.frame(r_index = row.names(outlier_b), outlier_b)
    outlier_b$CLUSTER <- cluster1
    outlier_temp_b<- bind_rows(outlier_b, outlier_temp_b)
    
  }
  
}

###############################################
# claim outlier Mahalnobis

outlier_temp_b$MSE <- outlier_temp_b$Reconstruction.MSE



# add CMS max
outlier_temp_b <- sqldf("select f.*, c.Max_Units from outlier_temp_b f INNER JOIN jcode_max_units c
                      ON f.CPT = c.Code")

# add median from baseline


outlier_temp_b <- sqldf("select  f.*, c.median_units as BaseLine_Median_Units from outlier_temp_b f
INNER JOIN jcode_descriptives3 c
                      ON f.CPT = c.CPT")

outlier_temp_b$baseline_units_ratio <- outlier_temp_b$total_units  / outlier_temp_b$BaseLine_Median_Units
outlier_temp_b$baseline_units_delta <- outlier_temp_b$total_units  - outlier_temp_b$BaseLine_Median_Units


# drugs discontiued or not covered by CMS are 0 add 0.01 so can do ratio
outlier_temp_b$CMS_units_ratio <- ifelse(outlier_temp_b$Max_Units != 0, outlier_temp_b$total_units / outlier_temp_b$Max_Units,
                                       0)
outlier_temp_b$CMS_units_delta <- ifelse(outlier_temp_b$Max_Units != 0, outlier_temp_b$total_units - outlier_temp_b$Max_Units,
                                       0)

distance1 <- sqldf("select total_claim_pd ,MSE,CMS_units_ratio from  outlier_temp_b")
distance1 <- scale(distance1)

# Mahalanobis from psych package
distance2 <- as.data.frame(outlier(distance1, plot = FALSE, bad = 5, xlab,ylab))
names(distance2)[1] <- "Mahalanobis"
outlier_temp2_b <- cbind(outlier_temp_b,distance2)
outlier_temp2_b <- mutate(outlier_temp2_b, 
                        Mahalanobis_rank = ntile(outlier_temp2_b$Mahalanobis, 10))
outlier_temp2_b$Reconstruction.MSE <- NULL


outlier_temp2_b$Units_Anomaly <- ifelse((outlier_temp2_b$Mahalanobis_rank >= 6 ),
                                      1, 0)

# these are units above CMS or above median of sample
outlier_temp3_unit_hits_high_b <- sqldf("select * from outlier_temp2_b where Units_Anomaly = 1
                                      order by Mahalanobis_rank DESC")
# flag for above and below benchmarks
outlier_temp3_unit_hits_high_b$above_benchmarks <-1
# these are below CMS and baseline but scorredd high mahalobious and anomoly

outlier_temp3_unit_hits_low_b <- sqldf("select * from outlier_temp2_b where Units_Anomaly = 0
                                     
                                     order by Mahalanobis_rank DESC")

outlier_temp3_unit_hits_low_b$above_benchmarks <-0
outlier_temp3_b <- rbind(outlier_temp3_unit_hits_high_b,outlier_temp3_unit_hits_low_b )

outlier_temp3_unit_hits_high_b$r_index <- NULL
Cluster4_claim_summary_df <- sqldf("select distinct * from  outlier_temp3_unit_hits_high_b
                                        order by Mahalanobis desc")

Cluster4_claim_summary_df[is.na(Cluster4_claim_summary_df)] <- 0






# arpriori for each J code of CCS

# from claim level data extract non anomaly and mahobious < 8 for case mix


if(NROW(outlier_temp_b) > 0) {
case_ids <- sqldf("select distinct CLAIM_ID from outlier_temp2_b where Units_Anomaly = 0")}

if(NROW(outlier_temp_b) == 0) {
  case_ids <- sqldf("select distinct CLAIM_ID from outlier_temp2 where Units_Anomaly = 0")}


claim_level1 <- sqldf("select c.* from claim_level1 c,case_ids i
              where c.CLAIM_ID = i.CLAIM_ID")


# anomaly temp files
outlier_b_an <- data.frame(matrix(ncol = 35, nrow = 0))
outlier_columns_an <- c('PATIENT_ID', 'BILL_TYPE', 'CPT_MODIFIER', 'REVENUE_CODE','CLAIM_ID',
                        'PLACE_OF_SERVICE', 'CPT', 'total_units', 'total_claim_pd', 'Congenital_anomalies',
                        'Diseases_of_the_blood', 'Diseases_of_the_circulatory_system',
                        'Diseases_of_the_digestive_system', 'Diseases_of_the_genitourinary_system', 
                        'Diseases_of_the_musculoskeletal_system_and_connective_tissue', 
                        'Diseases_of_the_nervous_system_and_sense_organs', 
                        'Diseases_of_the_respiratory_system', 
                        'Diseases_of_the_skin_and_subcutaneous_tissue', 
                        'Endocrine_metabolic_diseases_immunity_disorder', 
                        'Infectious_and_parasitic_diseases', 'Injury_and_poisoning',
                        'Mental_Illness', 'Neoplasms', 'Residual_codes', 'Symptoms_signs',
                        'LHS', 'RHS', 'support', 'confidence','lift', 'count', 'tot_rules',
                        'Jaccard_rank', 'case_mix_MSE', 'Anomaly_rank')

outlier_temp_b_an <- data.frame(matrix(ncol = 35, nrow = 0))
colnames(outlier_b_an) <- outlier_columns_an
colnames(outlier_temp_b_an) <- outlier_columns_an


jid <- sqldf("select distinct CPT from claim_level1 ")
#jid <- sqldf("select distinct CPT from claim_level1  where CPT = 'J8530'")
                      
                     
# turns off graphics in R studio
graphics.off()
par("mar")
par(mar=c(1,1,1,1))

for (i in rownames(jid))
{
  jid_loop <- jid[i, ]
  
  j_string <- paste0("select PATIENT_ID, BILL_TYPE, CPT_MODIFIER, REVENUE_CODE,CLAIM_ID,
                     PLACE_OF_SERVICE, CPT, total_units, total_claim_pd, Congenital_anomalies,
                     Diseases_of_the_blood, Diseases_of_the_circulatory_system,
                     Diseases_of_the_digestive_system, Diseases_of_the_genitourinary_system, 
                     Diseases_of_the_musculoskeletal_system_and_connective_tissue, 
                     Diseases_of_the_nervous_system_and_sense_organs, 
                     Diseases_of_the_respiratory_system, 
                     Diseases_of_the_skin_and_subcutaneous_tissue, 
                     Endocrine_metabolic_diseases_immunity_disorder, 
                     Infectious_and_parasitic_diseases, Injury_and_poisoning,
                     Mental_Illness, Neoplasms, Residual_codes, Symptoms_signs
                     from claim_level1
                     where CPT = '",jid_loop,"'")
  
  an0 <- sqldf(j_string)
  # remnove columns that all NA from dummy
  an0[sapply(an0, function(x) all(is.na(x)))] <- NULL
  
  # remove fields for anomaly run
  an1 <- an0
  an1$PATIENT_ID <- NULL
  an1$total_claim_pd <- NULL
  an1$CLAIM_ID <- NULL
  an1$Units_Anomaly <- NULL
  an1$Max_Units <- NULL
  an1$total_claim_pd <- NULL
  
  
  an1 <- an1[sapply(an1, function(x) length(unique(na.omit(x)))) >1]
  

  
  if(NCOL(an1) > 0) {
    
    
    
    #  CCS by claim and J code
    ap1 <- sqldf( "select distinct i.CLAIM_ID, i.multi_desc from icd_C4_1 i, an0 a
                  where i.CLAIM_ID = a.CLAIM_ID
                  order by i.CLAIM_ID")
    
    ap1 <- sqldf("select  a.*, c.multi_code as CCS_DX from ap1 a, CCSdesc c
                 where a.multi_desc = c.multi_desc")
    
   # removed modifer
    ap1$multi_desc <- NULL
    
    
    ap1$CLAIM_ID <- as.factor(as.character((ap1$CLAIM_ID)))
    ap1$CCS_DX <- as.factor(as.character((ap1$CCS_DX)))
    
    ap2 <- ddply(ap1, c("CLAIM_ID"),
                 function(ap1)paste(ap1$CCS_DX,
                                    collapse = ','))
    
    names(ap2)[2] <- "CCS"
    
    ap3 <- ap2
    ap3$CLAIM_ID <- NULL
    
    write.csv(ap2, file = "ccs_transactions.csv")
    
    txn <- read.transactions(file="ccs_transactions.csv", rm.duplicates = TRUE,
                             format="single", sep=",", cols=c("CLAIM_ID","CCS"))
    
    
    
    
    # remove quotes
    txn@itemInfo$labels <- gsub("\"","",txn@itemInfo$labels)
    
    basket_rules <- apriori(txn,parameter = list(sup = 0.01, 
                                                 conf=0.01, target="rules"))
    
    # remove redundent rules
  basket_rules <- basket_rules[!is.redundant(basket_rules)]
    CCS_Basket <- DATAFRAME(basket_rules, separate = TRUE)
    
    # have to have at least 3 rules
    if (NROW(CCS_Basket) >=3 ){
    
    # see if LHS all empty
    # if so add 0 to LHS
    CCS_Basket <-  CCS_Basket[!sapply( CCS_Basket, function(k) all(k =="{}"))]
    
    if(NCOL(CCS_Basket) ==6){
       # remove brackets
    CCS_Basket$LHS <- gsub("[{}]","", CCS_Basket$LHS)
    CCS_Basket$RHS <- gsub("[{}]","", CCS_Basket$RHS)
    }
    
    if(NCOL(CCS_Basket) ==5){
      CCS_Basket$LHS <- '0'
      CCS_Basket$RHS <- gsub("[{}]","", CCS_Basket$RHS)
      #CCS_Basket <- sqldf("select LHS,RHS,support,confidence,lift,count from CCS_Basket")
    }
    
    
   # SNA
        # nodes rule id adges are rules
    
    adj1 <- sqldf("select LHS , RHS , count as weight from CCS_Basket")
    
    # add row ids for nodes
    adj1$id <- 1:nrow(adj1)
    
   
    adj1$weight <- as.integer(adj1$weight)
    adj2 <-adj1
    adj2$id <- NULL
    
  
    # 
    transferGraph <- graph_from_data_frame(adj2, directed = TRUE)
   
    # look at other layouts in igraph
    # plot(transferGraph, layout = layout.fruchterman.reingold(transferGraph,
    #                                                          weights=E(transferGraph)$weight),
    #      edge.arrow.size = .2)
   
    
    ig <- plot(basket_rules, method="graph")
    ig_df <- get.data.frame(ig,what = "both")
   
    # 
    # visNetwork(
    #   nodes = data.frame(
    #     id = ig_df$vertices$name
    #     ,value = ig_df$vertices$lift  # try lift & confidence
    #     ,title = ifelse(ig_df$vertices$label == "", ig_df$vertices$name, ig_df$vertices$label)
    #     ,ig_df$vertices
    #   )
    #   , edges = ig_df$edges
    # ) %>%
    #   visNodes(size = 10) %>%
    #   visLegend() %>%
    #   visEdges(smooth = FALSE) %>%
    #   visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
    #   visInteraction(navigationButtons = TRUE) %>%
    #   visEdges( arrows = 'from') %>%
    #   visPhysics(
    #     solver = "barnesHut",
    #     maxVelocity = 35,
    #     forceAtlas2Based = list(gravitationalConstant = -6000)
    #     
    #   ) 
    
    
    
    # betweenness
    # ig_between <-  as.data.frame(betweenness(transferGraph))
    # names(ig_between)[2] <- "betweenness"
    
    # edge betweeness
  
    
    ig_between <-  as.data.frame(edge.betweenness(transferGraph, weights=E(transferGraph)$weight))
    names(ig_between)[1] <- "edge_betweenness"
    ig_between <- rownames_to_column(ig_between, var="id")
    
    # other metrics are at the NODE level
    
    # coreness
    ig_coreness <-  as.data.frame(coreness(transferGraph, mode="all"))
    names(ig_coreness)[1] <- "coreness"
    ig_coreness <-  rownames_to_column(ig_coreness, var="id")
    

    
    # strength --- numbr of edges that go from one node to another
    # lower number less connected
    ig_strength <-  as.data.frame(strength(transferGraph, weights=E(transferGraph)$weight))
    names(ig_strength)[1] <- "strength"
    ig_strength <-  rownames_to_column(ig_strength, var="id")
    
    # closeness number of steps to access other nodes - higher values less
    # centrality
    
    ig_closeness <- as.data.frame(closeness(transferGraph, normalized = TRUE, weights=E(transferGraph)$weight))
    names(ig_closeness)[1] <- "closeness"
    ig_closeness <-  rownames_to_column(ig_closeness, var="id")
    
    
    # authority score -- high authority when is linked
    #by other nodes with link other nodes
    
    ig_authority <- as.data.frame(authority_score(transferGraph,scale=TRUE,
                                           weights=E(transferGraph)$weight)$vector)
    names(ig_authority)[1] <- "authority_score"
    ig_authority <-  rownames_to_column(ig_authority, var="id")
    ig_authority <- sqldf("select * from ig_authority where id != ''")
    
    
    
    hist(degree(transferGraph))
    
    cl <- clusters(transferGraph)
    plot(transferGraph, layout = layout.fruchterman.reingold(transferGraph,
                                                            weights=E(transferGraph)$weight),
         vertex.color = cl$membership+1L, edge.arrow.size = 1)
    
  
    
    # remove rwonames after redundants deleted
    rownames(CCS_Basket) <- c()
    
    dissi <- dissimilarity(basket_rules, method = "Jaccard", which = "associations")
    
    dissi_m <- melt(as.matrix(dissi))
    p <- t(apply(dissi_m[,c(1,2)],1,FUN=sort))
    rmv1 <- which(p[,1] == p[,2])
    
    p <- paste(p[,1],p[,2], sep = "|")
    rmv2 <- which(duplicated(p))
    
    dissi_m <- as.data.frame(dissi_m[-c(rmv1,rmv2),])
    
    # filter to get all with score of 1
    # VAR is the index 
    dissi_m1 <- sqldf("select Var1 as rule_i, count(Var1) as rule_cnt from  dissi_m
                      where value = 1
                      group by Var1")
    
    dissi_m2 <- sqldf("select Var2 as rule_i, count(Var2) as rule_cnt from  dissi_m
                      where value = 1
                      group by Var2")
    
    distance_rule_cnt <- rbind(dissi_m1, dissi_m2)
    
    distance_rule_cnt <- sqldf("select rule_i, sum(rule_cnt) as tot_rules
                               from distance_rule_cnt
                               group by rule_i
                               order by tot_rules desc ")
    
    
    CCS_Basket<- data.frame(rule_index = row.names(CCS_Basket), CCS_Basket)
    #CCS_Basket$tot_rules <- ifelse(is.na(CCS_Basket$tot_rules), 0, CCS_Basket$tot_rules)
    CCS_Basket <- sqldf("select c.*, d.* from CCS_Basket c LEFT JOIN  distance_rule_cnt d
                        ON c.rule_index = d.rule_i
                        order by tot_rules desc")
    
    
    # ADD SNA metrics to market basket data
   
    
    CCS_Basket <- sqldf("select c.*, d.edge_betweenness from CCS_Basket c,  
                        ig_between d,
                        adj1 a
                        where d.id = a.id
                        AND a.LHS = c.LHS
                        AND a.RHS = c.RHS")
    
    CCS_Basket <- sqldf("select c.*, d.authority_score from  CCS_Basket c  
                         LEFT JOIN ig_authority d
                        ON c.LHS = d.id")
    
    
    CCS_Basket <- sqldf("select c.*, d.closeness from  CCS_Basket c  
                         LEFT JOIN ig_closeness d
                        ON c.LHS = d.id")
    
  
    CCS_Basket <- sqldf("select c.*, d.strength from  CCS_Basket c  
                         LEFT JOIN ig_strength d
                        ON c.LHS = d.id")
    
    CCS_Basket <- sqldf("select c.*, d.coreness from  CCS_Basket c  
                         LEFT JOIN ig_coreness d
                        ON c.LHS = d.id")
    
    
   
    
    CCS_Basket$rule_i <- NULL
    
    CCS_Basket2 <- CCS_Basket
    # remove jaccard from anomolay
    CCS_Basket2$count <- NULL
    
    CCS_Basket2_0 <- CCS_Basket2
    CCS_Basket2_0$rule_index <- 0
    CCS_Basket2_0$LHS <- 0
    CCS_Basket2_0$RHS <- 0
    
    learnname <- colnames(CCS_Basket2_0)
    CCS_Basket2_h2o <- as.h2o(CCS_Basket2_0 )
    
    # change field range to sql for  CCS_Basket2
    
   
    CCS_Basket2_h2o_dl <- h2o.deeplearning(x = learnname, training_frame = CCS_Basket2_h2o, autoencoder = TRUE, 
                                           hidden = c(10,2,10), epochs = 100, stopping_tolerance = 1e-4, activation = "Tanh",
                                           categorical_encoding = "AUTO")
    
    
    
    CCS_Basket2_h2o_dl2 = h2o.anomaly(CCS_Basket2_h2o_dl, CCS_Basket2_h2o)
    
    CCS_Basket2_h2o_dl2 <- as.data.frame(CCS_Basket2_h2o_dl2)
    
    CCS_Basket <- cbind(CCS_Basket ,CCS_Basket2_h2o_dl2)
    names(CCS_Basket)[14] <- "case_mix_MSE"
    
    CCS_Basket <- mutate(CCS_Basket, 
                         Anomaly_rank = ntile(CCS_Basket$case_mix_MSE, 10))
    CCS_Basket <- mutate(CCS_Basket, 
                         Jaccard_rank = ntile(CCS_Basket$tot_rules, 10))
    # select where jacard rank and anomaly both in upper quartile
    
    max_basket <- sqldf("select max(Anomaly_rank) as an_mx, max(Jaccard_rank) as jac_max from CCS_Basket")
    CCS_Basket <- cbind(CCS_Basket,max_basket)
    
    
    # select where jacard rank and anomaly both in upper quartile accounts for ties with max above
    # checks to see that jacard is not all constant
    if (length(unique(CCS_Basket[,"tot_rules"])) != 1) {
      CCS_Basket3 <- sqldf("select * from CCS_Basket where  jac_max = Jaccard_rank
                           and an_mx =Anomaly_rank")
    }
    
    # if jacard all constant just use MSE anomoly
    if (length(unique(CCS_Basket[,"tot_rules"])) == 1) {
      CCS_Basket3 <- sqldf("select * from CCS_Basket where an_mx =Anomaly_rank")
    }
    
    
    
    # match anomaly rule to base data
    an_hit1 <- sqldf("select a.CLAIM_ID as CLAIM_ID_x, c.* from ap2 a, CCS_Basket3 c
                     where a.CCS = c.LHS")
    
    an_hit2 <- sqldf("select a.CLAIM_ID as CLAIM_ID_x, c.* from ap2 a, CCS_Basket3 c
                     where a.CCS = c.RHS")
    
    an_hit2 <- rbind(an_hit1, an_hit2)
    
    an_hit2 <- sqldf("select distinct * from an_hit2 ")
    
    an_hit2 <- sqldf("select distinct n.*, a.* from an_hit2 a, an0 as n
                     where a.CLAIM_ID_x = n.CLAIM_ID")
    
    an_hit2$CLAIM_ID_x <- NULL
    an_hit2$rule_index <- NULL
    #an_hit2$CLUSTER <- 4
   
    
    # above checks for all columns to be constant - if so then will have no columns
    # confoirm no columns == 0
    #an_hit2 <- an_hit2[sapply(an_hit2, function(x) length(unique(na.omit(x)))) >1]
    if(NCOL(an_hit2) > 0) {
    outlier_temp_b_an<- bind_rows(an_hit2, outlier_temp_b_an)
    outlier_temp_b_an$Cluster <- cluster2}
    
    }
    
  }
  
}

Cluster4_casemix_summary_df <- outlier_temp_b_an

Cluster4_casemix_summary_df[is.na(Cluster4_casemix_summary_df)] <- 0

Cluster4_casemix_summary_df <- sqldf("select * from Cluster4_casemix_summary_df order by Anomaly_rank desc")




 
 # CLUSTER 1
 # high dollar lower volume
 #################################################################################
 
 # filter for jcodes in cluster 1
 

claims_420b_string <- paste0("select  CPT from jcode_descriptives3
                             where cluster  = '",cluster2,"'")

claims_420b <- sqldf( claims_420b_string)

 

cluster2_j_claims_string <- paste0("select  c.* from claims_420a c
                                   where c.CPT IN (select CPT from jcode_descriptives3 where cluster = '",cluster2,"')")

cluster2_j_claims <- sqldf(cluster2_j_claims_string)


 
 c2_ids <- sqldf("select distinct CLAIM_ID from cluster2_j_claims")
 
 

 icd_C2_1 <- sqldf("select i.* from icd2  i,c2_ids c where i.CLAIM_ID = c.CLAIM_ID  order by CLAIM_ID")
 CCS_Dummy_test <- sqldf("select distinct CLAIM_ID, multi_desc from icd_C2_1")
 
 
 CCS_Dummy_test <- cbind(CCS_Dummy_test, dummy(CCS_Dummy_test$multi_desc , sep= "_"))
 # replace with CCS
 colnames(CCS_Dummy_test) <- (gsub("CCS_Dummy_test_", "",  colnames(CCS_Dummy_test)))
 # group by client id
 CCS_Dummy2_test <- CCS_Dummy_test %>% group_by(CLAIM_ID) %>% summarise_if(is.numeric, sum)
 
 # temporarialy make claim id text
 CCS_Dummy2_test$CLAIM_ID <- as.character(CCS_Dummy2_test$CLAIM_ID)
 
 # recode if > 0 then 1 else 0 instead of summing dummies
 CCS_Dummy3_test <- CCS_Dummy2_test %>% mutate_if(is.numeric,
                                                  function(x) case_when(
                                                    x >= 1 ~ 1,
                                                    x == 0 ~ 0
                                                  )
 )
 
 CCS_Dummy3_test <- CCS_Dummy3_test %>% mutate_if(is.numeric, funs(factor(.)))
 CCS_Dummy3_test$CLAIM_ID <- as.numeric(CCS_Dummy3_test$CLAIM_ID)
 CCS_Dummy3_test$multi_desc <- NULL
 CCS_Dummy3_test <- sqldf("select * from CCS_Dummy3_test order by CLAIM_ID")
 CCS_Dummy3_test$CLAIM_IDx <-CCS_Dummy3_test$CLAIM_ID
 CCS_Dummy3_test$CLAIM_ID <- NULL
 
 
 
 
 icd_C2_2 <- CCS_Dummy3_test
 
 
 
 cluster2_j_claims2 <- sqldf ("select CLAIM_ID, PATIENT_ID,  BILL_TYPE,CPT_MODIFIER,REVENUE_CODE,
                              PLACE_OF_SERVICE, CPT, UNITS_BILLED, AMT_PAID
                              from cluster2_j_claims
                              order by CPT")
 
 # merge CCS to J codes
 # the older claims have ICD9 codes do inner join
 
 cluster2_j_claims2 <- sqldf ("select j.*, i.* from   cluster2_j_claims2 j INNER join icd_C2_2 i
                              ON j.CLAIM_ID = i.CLAIM_IDX")
 
 cluster2_j_claims2$CLAIM_IDx <- NULL
 
 cluster2_j_claims2$CPT <- as.factor(cluster2_j_claims2$CPT)
 cluster2_j_claims2$CPT_MODIFIER <- as.factor(cluster2_j_claims2$CPT_MODIFIER)
 cluster2_j_claims2$REVENUE_CODE <- as.factor(as.character(cluster2_j_claims2$REVENUE_CODE))
 
 

 
 # anomalies
 
 
 outlier <- data.frame(matrix(ncol = 27, nrow = 0))
 outlier_columns <- c('PATIENT_ID', 'BILL_TYPE', 'CPT_MODIFIER', 'REVENUE_CODE','CLAIM_ID',
                      'PLACE_OF_SERVICE', 'CPT', 'UNITS_BILLED','AMT_PAID', 'Congenital_anomalies',
                      'Diseases_of_the_blood', 'Diseases_of_the_circulatory_system',
                      'Diseases_of_the_digestive_system', 'Diseases_of_the_genitourinary_system', 
                      'Diseases_of_the_musculoskeletal_system_and_connective_tissue', 
                      'Diseases_of_the_nervous_system_and_sense_organs', 
                      'Diseases_of_the_respiratory_system', 
                      'Diseases_of_the_skin_and_subcutaneous_tissue', 
                      'Endocrine_metabolic_diseases_immunity_disorder', 
                      'Infectious_and_parasitic_diseases', 'Injury_and_poisoning',
                      'Mental_Illness', 'Neoplasms', 'Residual_codes', 'Symptoms_signs',
                      'CLUSTER', 'Reconstruction.MSE')
 
 outlier_temp <- data.frame(matrix(ncol = 27, nrow = 0))
 colnames(outlier) <- outlier_columns
 colnames(outlier_temp) <- outlier_columns
 
 # dummy table structure to pull from base data so that all CCS codes are included in
 # data pull
 dummy_col_names <-  c('PATIENT_ID', 'BILL_TYPE', 'CPT_MODIFIER', 'REVENUE_CODE','CLAIM_ID',
                       'PLACE_OF_SERVICE', 'CPT', 'UNITS_BILLED','AMT_PAID', 'Congenital_anomalies',
                       'Diseases_of_the_blood', 'Diseases_of_the_circulatory_system',
                       'Diseases_of_the_digestive_system', 'Diseases_of_the_genitourinary_system', 
                       'Diseases_of_the_musculoskeletal_system_and_connective_tissue', 
                       'Diseases_of_the_nervous_system_and_sense_organs', 
                       'Diseases_of_the_respiratory_system', 
                       'Diseases_of_the_skin_and_subcutaneous_tissue', 
                       'Endocrine_metabolic_diseases_immunity_disorder', 
                       'Infectious_and_parasitic_diseases', 'Injury_and_poisoning',
                       'Mental_Illness', 'Neoplasms', 'Residual_codes', 'Symptoms_signs')
 
 ccsnames <- c('Congenital_anomalies',
               'Diseases_of_the_blood', 'Diseases_of_the_circulatory_system',
               'Diseases_of_the_digestive_system', 'Diseases_of_the_genitourinary_system', 
               'Diseases_of_the_musculoskeletal_system_and_connective_tissue', 
               'Diseases_of_the_nervous_system_and_sense_organs', 
               'Diseases_of_the_respiratory_system', 
               'Diseases_of_the_skin_and_subcutaneous_tissue', 
               'Endocrine_metabolic_diseases_immunity_disorder', 
               'Infectious_and_parasitic_diseases', 'Injury_and_poisoning',
               'Mental_Illness', 'Neoplasms', 'Residual_codes', 'Symptoms_signs')
 
 
 fnames <- c( 'BILL_TYPE', 'CPT_MODIFIER', 'REVENUE_CODE','CLAIM_ID',
              'PLACE_OF_SERVICE', 'CPT')
 
 intnames <- c('PATIENT_ID', 'CLAIM_ID',
               'UNITS_BILLED','AMT_PAID')
 
 numnames <- c('AMT_PAID')
 
 
 dummy_pull <- data.frame(matrix(ncol = 25, nrow = 1))
 colnames(dummy_pull) <- dummy_col_names
 
 
 dummy_pull[ccsnames] <- lapply(dummy_pull[ccsnames], as.factor)
 dummy_pull[is.na(dummy_pull)] <-0
 dummy_pull[fnames] <- lapply(dummy_pull[fnames], as.factor)
 dummy_pull[is.na(dummy_pull)] <-0
 dummy_pull[intnames] <- lapply(dummy_pull[intnames], as.integer)
 dummy_pull[numnames] <- lapply(dummy_pull[numnames], as.numeric)
 
 
 
 dummy_pull[setdiff(names(cluster4_j_claims2), names(dummy_pull))] <- NA
 cluster2_j_claims2 [setdiff(names(dummy_pull), names(cluster2_j_claims2))] <- NA
 
 
 cluster2_j_claims2  <- rbind( dummy_pull,cluster2_j_claims2 )
 cluster2_j_claims2 <- sqldf("select  * from cluster2_j_claims2  where CPT != '0'")
 
 jid <- sqldf("select distinct CPT from cluster2_j_claims2")
 
 #jid <- sqldf("select distinct CPT from cluster2_j_claims2 where CPT = 'J0180'")


 for (i in rownames(jid))
 {
   jid_loop <- jid[i, ]
  
   
   j_string <- paste0("select PATIENT_ID, BILL_TYPE, CPT_MODIFIER, REVENUE_CODE,CLAIM_ID,
                      PLACE_OF_SERVICE, CPT, UNITS_BILLED, AMT_PAID, Congenital_anomalies,
                      Diseases_of_the_blood, Diseases_of_the_circulatory_system,
                      Diseases_of_the_digestive_system, Diseases_of_the_genitourinary_system, 
                      Diseases_of_the_musculoskeletal_system_and_connective_tissue, 
                      Diseases_of_the_nervous_system_and_sense_organs, 
                      Diseases_of_the_respiratory_system, 
                      Diseases_of_the_skin_and_subcutaneous_tissue, 
                      Endocrine_metabolic_diseases_immunity_disorder, 
                      Infectious_and_parasitic_diseases, Injury_and_poisoning,
                      Mental_Illness, Neoplasms, Residual_codes, Symptoms_signs
                      from cluster2_j_claims2
                      where CPT = '",jid_loop,"'")
   
   an0 <- sqldf(j_string)
   # remnove columns that all NA from dummy
   an0[sapply(an0, function(x) all(is.na(x)))] <- NULL
   
   #jid_loop
   an1 <- an0
   an1$PATIENT_ID <- NULL
   an1$AMT_PAID <- NULL
   an1$CLAIM_ID <- NULL
   
   #const_check <- an1[,!apply(an1, MARGIN = 2, function(x) max(x,na.rm = TRUE) == min(x, na.rm = TRUE))]
   
   # above checks for all columns to be constant - if so then will have no columns
   # confoirm no columns == 0
   
   #if(dim(const_check)[2] != 0) {
     
     # remove columns with all constant
     an1 <- an1[sapply(an1, function(x) length(unique(na.omit(x)))) >1]
     # only run anomoly if have 3+ columns non constant
     if(NCOL(an1) >= 3) {
       
       
       learnname <- colnames(an1) 
       
       an1_h2o <- as.h2o(an1)
       
       an1_h2o_dl <- h2o.deeplearning(x = learnname, training_frame = an1_h2o, autoencoder = TRUE, 
                                      hidden = c(10,2,10), epochs = 100, stopping_tolerance = 1e-4, activation = "Tanh",
                                      categorical_encoding = "AUTO")
       
       
       an1_h2o_dl2 = h2o.anomaly(an1_h2o_dl, an1_h2o)
       an1_h2o_dl2 <- as.data.frame(an1_h2o_dl2)
     
     
     outlier <- cbind(an0, an1_h2o_dl2)
     
     outlier <- data.frame(r_index = row.names(outlier), outlier)
     outlier$CLUSTER <- cluster2
     outlier_temp<- bind_rows(outlier, outlier_temp)
     #outlier_temp<- rbind(outlier, outlier_temp)
     
     }  
   
 }
 
   
   ###############################################
   # claim line outlier Mahalnobis
 outlier_temp[is.na( outlier_temp)] <- 0
   outlier_temp$MSE <- outlier_temp$Reconstruction.MSE
   
   
   # from mississippi medicaid  fee schedule
   jcode_max_units <- read.csv("CMS_Jcode_max_units.csv", sep = ",",  quote = "\"", header = TRUE)
   # add CMS max
   outlier_temp <- sqldf("select  f.*, c.Max_Units from outlier_temp f INNER JOIN jcode_max_units c
                         ON f.CPT = c.Code")
   
   # add median from baseline
   
   
   outlier_temp <- sqldf("select  f.*, c.median as BaseLine_Median_Units from outlier_temp f INNER JOIN jcode_descriptives_units c
                         ON f.CPT = c.group1")
   
   
   outlier_temp$baseline_units_ratio <- outlier_temp$UNITS_BILLED / outlier_temp$BaseLine_Median_Units
   outlier_temp$baseline_units_delta <- outlier_temp$UNITS_BILLED - outlier_temp$BaseLine_Median_Units
   
   
   # drugs discontiued or not covered by CMS are 0 add 0.01 so can do ratio
   outlier_temp$CMS_units_ratio <- ifelse(outlier_temp$Max_Units != 0, outlier_temp$UNITS_BILLED / outlier_temp$Max_Units,
                                          0)
   outlier_temp$CMS_units_delta <- ifelse(outlier_temp$Max_Units != 0, outlier_temp$UNITS_BILLED - outlier_temp$Max_Units,
                                          0)
   
   distance1 <- sqldf("select AMT_PAID,MSE,CMS_units_ratio from  outlier_temp")
   distance1 <- scale(distance1)
   
   
   # Mahalanobis from psych package
   distance2 <- as.data.frame(outlier(distance1, plot = FALSE, bad = 5, xlab,ylab))
   names(distance2)[1] <- "Mahalanobis"
   outlier_temp2 <- cbind(outlier_temp,distance2)
   
   
   pd_dates  <- sqlQuery(
     conn,
     " select DISTINCT
     L.CLAIM_ID,
     CLM.DATE_PAID
     FROM dbo.CLAIM_LINE L, dbo.CLAIM CLM
     WHERE L.CLAIM_ID = CLM.CLAIM_ID
     AND L.PROJECT_ID = 1138
     AND L.AMT_PAID  > 0
     AND L.CPT Like '%J%'
     AND CLM.DATE_PAID >= '01-05-2018' ")
   
   
   # add add paid date filter on 420 days last paid --- for hx data hard coded to 1/5/18
   outlier_temp2<- sqldf ("select  o.* , c.DATE_PAID from outlier_temp2 o,pd_dates c
                          where  o.CLAIM_ID = c.CLAIM_ID")
   
   
   outlier_temp2 <- mutate(outlier_temp2, 
                           Mahalanobis_rank = ntile(outlier_temp2$Mahalanobis, 10))
   outlier_temp2$Reconstruction.MSE <- NULL
   
   
   outlier_temp2$Units_Anomaly <- ifelse((outlier_temp2$Mahalanobis_rank >= 8 ),
                                         1, 0)
   
   # these are units above CMS or above median of sample
   outlier_temp3_unit_hits_high <- sqldf("select * from outlier_temp2 where Units_Anomaly = 1
                                         order by Mahalanobis_rank DESC")
   # flag for above and below benchmarks
   outlier_temp3_unit_hits_high$above_benchmarks <-1
   # these are below CMS and baseline but scorredd high mahalobious and anomoly
   
   outlier_temp3_unit_hits_low <- sqldf("select * from outlier_temp2 where Units_Anomaly = 0
                                        
                                        order by Mahalanobis_rank DESC")
   
   outlier_temp3_unit_hits_low$above_benchmarks <-0
   outlier_temp3 <- rbind(outlier_temp3_unit_hits_high,outlier_temp3_unit_hits_low )
   
   
   
   outlier_temp3_unit_hits_high$r_index <- NULL
   Cluster1_claim_line_summary_df <- sqldf("select distinct * from outlier_temp3_unit_hits_high 
                                      order by Mahalanobis desc")
   
   Cluster1_claim_line_summary_df[is.na(Cluster1_claim_line_summary_df)] <- 0
   
  

   
   outlier_temp3_case_mix_hits <- sqldf("select * from outlier_temp2 where Units_Anomaly = 0
                                        
                                        order by Mahalanobis_rank DESC")
   

 
 # claim level
 
   claim_level0 <- sqldf("select CLAIM_ID, CPT, sum(UNITS_BILLED) as total_units, sum(AMT_PAID) as total_claim_pd
                      from outlier_temp2
                      group by CLAIM_ID, CPT")
 
 
 
 claim_level1 <- sqldf("select  PATIENT_ID, BILL_TYPE, CPT_MODIFIER, REVENUE_CODE,CLAIM_ID,
                       PLACE_OF_SERVICE, CPT,  Congenital_anomalies,
                       Diseases_of_the_blood, Diseases_of_the_circulatory_system,
                       Diseases_of_the_digestive_system, Diseases_of_the_genitourinary_system, 
                       Diseases_of_the_musculoskeletal_system_and_connective_tissue, 
                       Diseases_of_the_nervous_system_and_sense_organs, 
                       Diseases_of_the_respiratory_system, 
                       Diseases_of_the_skin_and_subcutaneous_tissue, 
                       Endocrine_metabolic_diseases_immunity_disorder, 
                       Infectious_and_parasitic_diseases, Injury_and_poisoning,
                       Mental_Illness, Neoplasms, Residual_codes, Symptoms_signs,
                       Max_Units, CLUSTER, Units_Anomaly, Mahalanobis_rank
                       from outlier_temp2")
 
 claim_level1 <- sqldf("select  c.*, s.total_units, s.total_claim_pd 
                       from claim_level1 c, claim_level0 s
                       where c.CLAIM_ID = s.CLAIM_ID
                       AND c.CPT = s.CPT
                       and c.Units_Anomaly = 0
                       ")
 
 #####################################################################
 
 jcode_descriptives <- as.data.frame(describeBy(claim_level1,
                                                group = list(claim_level1$CPT), 
                                                mat=TRUE))
 
 jcode_descriptives_pd <- sqldf("select * from jcode_descriptives where vars = 3
                                order by mean desc")
 
 jcode_descriptives_vol <- sqldf("select * from jcode_descriptives where vars = 2
                                 order by n desc")
 
 jcode_descriptives_units <- sqldf("select * from jcode_descriptives where vars = 4
                                   order by n desc")
 
 jcode_descriptives2 <- sqldf("select v.group1 as CPT, v.n as num_admins, 
                              v.mean as mean_num_admins, p.mean as mean_pd, u.mean as mean_units,
                              v.median as median_num_admins, p.median as median_pd, u.median as median_units,
                              v.min as min_num_admins, v.max as max_num_admins, 
                              p.min as min_pd, p.max as max_pd,
                              u.min as min_units, u.max as max_units
                              from jcode_descriptives_pd p, jcode_descriptives_vol v, jcode_descriptives_units u
                              where v.group1 = p.group1
                              and v.group1 = u.group1
                              order by mean_pd desc")
 
 
 #####################################################################
 # claim level anomolies
 
 # remove fields for anomaly run
 
 
 #####################################################################
 
 
 
 
 outlier_b <- data.frame(matrix(ncol = 27, nrow = 0))
 outlier_columns <- c('PATIENT_ID', 'BILL_TYPE', 'CPT_MODIFIER', 'REVENUE_CODE','CLAIM_ID',
                      'PLACE_OF_SERVICE', 'CPT', 'total_units', 'total_claim_pd', 'Congenital_anomalies',
                      'Diseases_of_the_blood', 'Diseases_of_the_circulatory_system',
                      'Diseases_of_the_digestive_system', 'Diseases_of_the_genitourinary_system', 
                      'Diseases_of_the_musculoskeletal_system_and_connective_tissue', 
                      'Diseases_of_the_nervous_system_and_sense_organs', 
                      'Diseases_of_the_respiratory_system', 
                      'Diseases_of_the_skin_and_subcutaneous_tissue', 
                      'Endocrine_metabolic_diseases_immunity_disorder', 
                      'Infectious_and_parasitic_diseases', 'Injury_and_poisoning',
                      'Mental_Illness', 'Neoplasms', 'Residual_codes', 'Symptoms_signs',
                      'CLUSTER', 'Reconstruction.MSE')
 
 outlier_temp_b <- data.frame(matrix(ncol = 27, nrow = 0))
 colnames(outlier_b) <- outlier_columns
 colnames(outlier_temp_b) <- outlier_columns
 
 
 # anomaly temp files
 outlier_b_an <- data.frame(matrix(ncol = 37, nrow = 0))
 outlier_columns_an <- c('PATIENT_ID', 'BILL_TYPE', 'CPT_MODIFIER', 'REVENUE_CODE','CLAIM_ID',
                         'PLACE_OF_SERVICE', 'CPT', 'total_units', 'total_claim_pd', 'Congenital_anomalies',
                         'Diseases_of_the_blood', 'Diseases_of_the_circulatory_system',
                         'Diseases_of_the_digestive_system', 'Diseases_of_the_genitourinary_system', 
                         'Diseases_of_the_musculoskeletal_system_and_connective_tissue', 
                         'Diseases_of_the_nervous_system_and_sense_organs', 
                         'Diseases_of_the_respiratory_system', 
                         'Diseases_of_the_skin_and_subcutaneous_tissue', 
                         'Endocrine_metabolic_diseases_immunity_disorder', 
                         'Infectious_and_parasitic_diseases', 'Injury_and_poisoning',
                         'Mental_Illness', 'Neoplasms', 'Residual_codes', 'Symptoms_signs',
                         'CLUSTER', 'Reconstruction.MSE',
                         'LHS', 'RHS', 'support', 'confidence','lift', 'count', 'tot_rules',
                         'Jaccard_rank', 'case_mix_MSE', 'Anomaly_rank')
 
 outlier_temp_b_an <- data.frame(matrix(ncol = 37, nrow = 0))
 colnames(outlier_b_an) <- outlier_columns_an
 colnames(outlier_temp_b_an) <- outlier_columns_an
 
  jid <- sqldf("select distinct CPT from claim_level1 ")
 
 
 
 
 
 for (i in rownames(jid)) {
   jid_loop <- jid[i, ]
   
   j_string <- paste0("select PATIENT_ID, BILL_TYPE, CPT_MODIFIER, REVENUE_CODE,CLAIM_ID,
                      PLACE_OF_SERVICE, CPT, total_units, total_claim_pd, Congenital_anomalies,
                      Diseases_of_the_blood, Diseases_of_the_circulatory_system,
                      Diseases_of_the_digestive_system, Diseases_of_the_genitourinary_system, 
                      Diseases_of_the_musculoskeletal_system_and_connective_tissue, 
                      Diseases_of_the_nervous_system_and_sense_organs, 
                      Diseases_of_the_respiratory_system, 
                      Diseases_of_the_skin_and_subcutaneous_tissue, 
                      Endocrine_metabolic_diseases_immunity_disorder, 
                      Infectious_and_parasitic_diseases, Injury_and_poisoning,
                      Mental_Illness, Neoplasms, Residual_codes, Symptoms_signs
                      from claim_level1
                      where CPT = '",jid_loop,"'")
   
   an0 <- sqldf(j_string)
   
   # remnove columns that all NA from dummy
   an0[sapply(an0, function(x) all(is.na(x)))] <- NULL
   
   an1 <- an0
   an1$PATIENT_ID <- NULL
   an1$total_claim_pd <- NULL
   an1$CLAIM_ID <- NULL
   an1$Units_Anomaly <- NULL
   an1$Max_Units <- NULL
   an1$total_claim_pd <- NULL
   
   # remove columns with all constant
   an1 <- an1[sapply(an1, function(x) length(unique(na.omit(x)))) >1]
   
   if(NCOL(an1) >= 3) {
     
     learnname <- colnames(an1)
     
     an1_h2o <- as.h2o(an1)
     
     an1_h2o_dl <- h2o.deeplearning(x = learnname, training_frame = an1_h2o, autoencoder = TRUE, 
                                    hidden = c(10,2,10), epochs = 100, stopping_tolerance = 1e-4, activation = "Tanh",
                                    categorical_encoding = "AUTO")
     
     
     an1_h2o_dl2 = h2o.anomaly(an1_h2o_dl, an1_h2o)
     #head(an1_h2o_dl2 )
     
     
     
     
     an1_h2o_dl2 <- as.data.frame(an1_h2o_dl2)
     #plot(sort(an1_h2o_dl2$Reconstruction.MSE), main=i)
     
     outlier_b <- cbind(an0, an1_h2o_dl2)
     
     outlier_b <- data.frame(r_index = row.names(outlier_b), outlier_b)
     outlier_b$CLUSTER <- cluster2
     outlier_temp_b<- bind_rows(outlier_b, outlier_temp_b)
     
     
     
   }
   
 }
 
 ###############################################
 # claim outlier Mahalnobis
  outlier_temp_b[is.na( outlier_temp_b)] <- 0
  outlier_temp_b$MSE <- outlier_temp_b$Reconstruction.MSE
  
  
  
  # add CMS max
  outlier_temp_b <- sqldf("select  f.*, c.Max_Units from outlier_temp_b f INNER JOIN jcode_max_units c
                          ON f.CPT = c.Code")
  
  # add median from baseline
  
  # add median from baseline
  
  
  outlier_temp_b <- sqldf("select  f.*, c.median_units as BaseLine_Median_Units from outlier_temp_b f
                          INNER JOIN jcode_descriptives3 c
                          ON f.CPT = c.CPT")
  
  # add median from baseline
  
  
  outlier_temp_b$baseline_units_ratio <- outlier_temp_b$total_units  / outlier_temp_b$BaseLine_Median_Units
  outlier_temp_b$baseline_units_delta <- outlier_temp_b$total_units  - outlier_temp_b$BaseLine_Median_Units
  
  
  # drugs discontiued or not covered by CMS are 0 add 0.01 so can do ratio
  outlier_temp_b$CMS_units_ratio <- ifelse(outlier_temp_b$Max_Units != 0, outlier_temp_b$total_units / outlier_temp_b$Max_Units,
                                           0)
  outlier_temp_b$CMS_units_delta <- ifelse(outlier_temp_b$Max_Units != 0, outlier_temp_b$total_units - outlier_temp_b$Max_Units,
                                           0)
  
  distance1 <- sqldf("select total_claim_pd ,MSE,CMS_units_ratio from  outlier_temp_b")
  distance1 <- scale(distance1)
  
  # Mahalanobis from psych package
  distance2 <- as.data.frame(outlier(distance1, plot = FALSE, bad = 5, xlab,ylab))
  names(distance2)[1] <- "Mahalanobis"
  outlier_temp2_b <- cbind(outlier_temp_b,distance2)
  outlier_temp2_b <- mutate(outlier_temp2_b, 
                            Mahalanobis_rank = ntile(outlier_temp2_b$Mahalanobis, 10))
  outlier_temp2_b$Reconstruction.MSE <- NULL
  
  
  outlier_temp2_b$Units_Anomaly <- ifelse((outlier_temp2_b$Mahalanobis_rank >= 6 ),
                                          1, 0)
  
  # these are units above CMS or above median of sample
  outlier_temp3_unit_hits_high_b <- sqldf("select * from outlier_temp2_b where Units_Anomaly = 1
                                          order by Mahalanobis_rank DESC")
  # flag for above and below benchmarks
  outlier_temp3_unit_hits_high_b$above_benchmarks <-1
  # these are below CMS and baseline but scorredd high mahalobious and anomoly
  
  outlier_temp3_unit_hits_low_b <- sqldf("select * from outlier_temp2_b where Units_Anomaly = 0
                                         
                                         order by Mahalanobis_rank DESC")
  
  outlier_temp3_unit_hits_low_b$above_benchmarks <-0
  outlier_temp3_b <- rbind(outlier_temp3_unit_hits_high_b,outlier_temp3_unit_hits_low_b )
  
  
  outlier_temp3_unit_hits_high_b$r_index <- NULL
  Cluster1_claim_summary_df <- sqldf("select distinct * from outlier_temp3_unit_hits_high_b 
                                     order by Mahalanobis desc")
  
  Cluster1_claim_summary_df[is.na(Cluster1_claim_summary_df)] <- 0
  
  
  
  # arpriori for each J code of CCS
  
  # from claim level data extract non anomaly and mahobious < 8 for case mix
  
  if(NROW(outlier_temp_b) > 0) {
    case_ids <- sqldf("select distinct CLAIM_ID from outlier_temp2_b where Units_Anomaly = 0")}
  
  if(NROW(outlier_temp_b) == 0) {
    case_ids <- sqldf("select distinct CLAIM_ID from outlier_temp2 where Units_Anomaly = 0")}
  
  
  claim_level1 <- sqldf("select c.* from claim_level1 c,case_ids i
                        where c.CLAIM_ID = i.CLAIM_ID")
  
  # anomaly temp files
  outlier_b_an <- data.frame(matrix(ncol = 35, nrow = 0))
  outlier_columns_an <- c('PATIENT_ID', 'BILL_TYPE', 'CPT_MODIFIER', 'REVENUE_CODE','CLAIM_ID',
                          'PLACE_OF_SERVICE', 'CPT', 'total_units', 'total_claim_pd', 'Congenital_anomalies',
                          'Diseases_of_the_blood', 'Diseases_of_the_circulatory_system',
                          'Diseases_of_the_digestive_system', 'Diseases_of_the_genitourinary_system', 
                          'Diseases_of_the_musculoskeletal_system_and_connective_tissue', 
                          'Diseases_of_the_nervous_system_and_sense_organs', 
                          'Diseases_of_the_respiratory_system', 
                          'Diseases_of_the_skin_and_subcutaneous_tissue', 
                          'Endocrine_metabolic_diseases_immunity_disorder', 
                          'Infectious_and_parasitic_diseases', 'Injury_and_poisoning',
                          'Mental_Illness', 'Neoplasms', 'Residual_codes', 'Symptoms_signs',
                          'LHS', 'RHS', 'support', 'confidence','lift', 'count', 'tot_rules',
                          'Jaccard_rank', 'case_mix_MSE', 'Anomaly_rank')
  
  outlier_temp_b_an <- data.frame(matrix(ncol = 35, nrow = 0))
  colnames(outlier_b_an) <- outlier_columns_an
  colnames(outlier_temp_b_an) <- outlier_columns_an
  
  
    jid <- sqldf("select distinct CPT from claim_level1 ")
  
  
  
    
    
    for (i in rownames(jid)){
      jid_loop <- jid[i, ]
      
      j_string <- paste0("select PATIENT_ID, BILL_TYPE, CPT_MODIFIER, REVENUE_CODE,CLAIM_ID,
                       PLACE_OF_SERVICE, CPT, total_units, total_claim_pd, Congenital_anomalies,
                       Diseases_of_the_blood, Diseases_of_the_circulatory_system,
                       Diseases_of_the_digestive_system, Diseases_of_the_genitourinary_system, 
                       Diseases_of_the_musculoskeletal_system_and_connective_tissue, 
                       Diseases_of_the_nervous_system_and_sense_organs, 
                       Diseases_of_the_respiratory_system, 
                       Diseases_of_the_skin_and_subcutaneous_tissue, 
                       Endocrine_metabolic_diseases_immunity_disorder, 
                       Infectious_and_parasitic_diseases, Injury_and_poisoning,
                       Mental_Illness, Neoplasms, Residual_codes, Symptoms_signs
                       from claim_level1
                       where CPT = '",jid_loop,"'")
      
      an0 <- sqldf(j_string)
      # remnove columns that all NA from dummy
      an0[sapply(an0, function(x) all(is.na(x)))] <- NULL
      
      # remove fields for anomaly run
      an1 <- an0
      an1$PATIENT_ID <- NULL
      an1$total_claim_pd <- NULL
      an1$CLAIM_ID <- NULL
      an1$Units_Anomaly <- NULL
      an1$Max_Units <- NULL
      an1$total_claim_pd <- NULL
      
      
      if(NCOL(an1) > 0) {
        
        
        
        #  CCS by claim and J code
        ap1 <- sqldf( "select distinct i.CLAIM_ID, i.multi_desc from icd_C2_1 i, an0 a
                    where i.CLAIM_ID = a.CLAIM_ID
                    order by i.CLAIM_ID")
        
        ap1 <- sqldf("select  a.*, c.multi_code as CCS_DX from ap1 a, CCSdesc c
                   where a.multi_desc = c.multi_desc")
        
        # removed modifer
        ap1$multi_desc <- NULL
        
        
        ap1$CLAIM_ID <- as.factor(as.character((ap1$CLAIM_ID)))
        ap1$CCS_DX <- as.factor(as.character((ap1$CCS_DX)))
        
        ap2 <- ddply(ap1, c("CLAIM_ID"),
                     function(ap1)paste(ap1$CCS_DX,
                                        collapse = ','))
        
        
        names(ap2)[2] <- "CCS"
        
        ap3 <- ap2
        ap3$CLAIM_ID <- NULL
        
        write.csv(ap2, file = "ccs_transactions.csv")
        
        txn <- read.transactions(file="ccs_transactions.csv", rm.duplicates = TRUE,
                                 format="single", sep=",", cols=c("CLAIM_ID","CCS"))
        
        
        
        
        # remove quotes
        txn@itemInfo$labels <- gsub("\"","",txn@itemInfo$labels)
        
        basket_rules <- apriori(txn,parameter = list(sup = 0.01, 
                                                     conf=0.01, target="rules"))
        # remove redundent rules
        basket_rules <- basket_rules[!is.redundant(basket_rules)]
        CCS_Basket <- DATAFRAME(basket_rules, separate = TRUE)
        
        # have to have at least 3 rules
        if (NROW(CCS_Basket) >=3 ){
          
          # see if LHS all empty
          # if so add 0 to LHS
         CCS_Basket <-  CCS_Basket[!sapply( CCS_Basket, function(k) all(k =="{}"))]
          
          if(NCOL(CCS_Basket) ==6){
            # remove brackets
            CCS_Basket$LHS <- gsub("[{}]","", CCS_Basket$LHS)
            CCS_Basket$RHS <- gsub("[{}]","", CCS_Basket$RHS)}
          
          if(NCOL(CCS_Basket) ==5){
            CCS_Basket$LHS <- '0'
            CCS_Basket$RHS <- gsub("[{}]","", CCS_Basket$RHS)}
          
          
          # SNA
          # nodes rule id adges are rules
          
          adj1 <- sqldf("select LHS , RHS , count as weight from CCS_Basket")
          
          # add row ids for nodes
          adj1$id <- 1:nrow(adj1)
          
          
          adj1$weight <- as.integer(adj1$weight)
          adj2 <-adj1
          adj2$id <- NULL
          
          
          # 
          transferGraph <- graph_from_data_frame(adj2, directed = TRUE)
          
          # look at other layouts in igraph
          plot(transferGraph, layout = layout.fruchterman.reingold(transferGraph,
                                                                   weights=E(transferGraph)$weight),
               edge.arrow.size = .2)
          
          
          ig <- plot(basket_rules, method="graph")
          ig_df <- get.data.frame(ig,what = "both")
          
          
          visNetwork(
            nodes = data.frame(
              id = ig_df$vertices$name
              ,value = ig_df$vertices$lift  # try lift & confidence
              ,title = ifelse(ig_df$vertices$label == "", ig_df$vertices$name, ig_df$vertices$label)
              ,ig_df$vertices
            )
            , edges = ig_df$edges
          ) %>%
            visNodes(size = 10) %>%
            visLegend() %>%
            visEdges(smooth = FALSE) %>%
            visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
            visInteraction(navigationButtons = TRUE) %>%
            visEdges( arrows = 'from') %>%
            visPhysics(
              solver = "barnesHut",
              maxVelocity = 35,
              forceAtlas2Based = list(gravitationalConstant = -6000)
              
            ) 
          
          
          
          # betweenness
          # ig_between <-  as.data.frame(betweenness(transferGraph))
          # names(ig_between)[2] <- "betweenness"
          
          # edge betweeness
          
          
          ig_between <-  as.data.frame(edge.betweenness(transferGraph, weights=E(transferGraph)$weight))
          names(ig_between)[1] <- "edge_betweenness"
          ig_between <- rownames_to_column(ig_between, var="id")
          
          # other metrics are at the NODE level
          
          # coreness
          ig_coreness <-  as.data.frame(coreness(transferGraph, mode="all"))
          names(ig_coreness)[1] <- "coreness"
          ig_coreness <-  rownames_to_column(ig_coreness, var="id")
          
          
          
          # strength --- numbr of edges that go from one node to another
          # lower number less connected
          ig_strength <-  as.data.frame(strength(transferGraph, weights=E(transferGraph)$weight))
          names(ig_strength)[1] <- "strength"
          ig_strength <-  rownames_to_column(ig_strength, var="id")
          
          # closeness number of steps to access other nodes - higher values less
          # centrality
          
          ig_closeness <- as.data.frame(closeness(transferGraph, normalized = TRUE, weights=E(transferGraph)$weight))
          names(ig_closeness)[1] <- "closeness"
          ig_closeness <-  rownames_to_column(ig_closeness, var="id")
          
          
          # authority score -- high authority when is linked
          #by other nodes with link other nodes
          
          ig_authority <- as.data.frame(authority_score(transferGraph,scale=TRUE,
                                                        weights=E(transferGraph)$weight)$vector)
          names(ig_authority)[1] <- "authority_score"
          ig_authority <-  rownames_to_column(ig_authority, var="id")
          ig_authority <- sqldf("select * from ig_authority where id != ''")
          
          
          
          hist(degree(transferGraph))
          
          cl <- clusters(transferGraph)
          plot(transferGraph, layout = layout.fruchterman.reingold(transferGraph,
                                                                   weights=E(transferGraph)$weight),
               vertex.color = cl$membership+1L, edge.arrow.size = 1)
          
          
          
          # remove rwonames after redundants deleted
          rownames(CCS_Basket) <- c()
          
          dissi <- dissimilarity(basket_rules, method = "Jaccard", which = "associations")
          
          dissi_m <- melt(as.matrix(dissi))
          p <- t(apply(dissi_m[,c(1,2)],1,FUN=sort))
          rmv1 <- which(p[,1] == p[,2])
          
          p <- paste(p[,1],p[,2], sep = "|")
          rmv2 <- which(duplicated(p))
          
          dissi_m <- as.data.frame(dissi_m[-c(rmv1,rmv2),])
          
          # filter to get all with score of 1
          # VAR is the index 
          dissi_m1 <- sqldf("select Var1 as rule_i, count(Var1) as rule_cnt from  dissi_m
                          where value = 1
                          group by Var1")
          
          dissi_m2 <- sqldf("select Var2 as rule_i, count(Var2) as rule_cnt from  dissi_m
                          where value = 1
                          group by Var2")
          
          distance_rule_cnt <- rbind(dissi_m1, dissi_m2)
          
          distance_rule_cnt <- sqldf("select rule_i, sum(rule_cnt) as tot_rules
                                   from distance_rule_cnt
                                   group by rule_i
                                   order by tot_rules desc ")
          
          
          CCS_Basket<- data.frame(rule_index = row.names(CCS_Basket), CCS_Basket)
          #CCS_Basket$tot_rules <- ifelse(is.na(CCS_Basket$tot_rules), 0, CCS_Basket$tot_rules)
          CCS_Basket <- sqldf("select c.*, d.* from CCS_Basket c LEFT JOIN  distance_rule_cnt d
                            ON c.rule_index = d.rule_i
                            order by tot_rules desc")
          
          
          # ADD SNA metrics to market basket data
          
          
          CCS_Basket <- sqldf("select c.*, d.edge_betweenness from CCS_Basket c,  
                            ig_between d,
                            adj1 a
                            where d.id = a.id
                            AND a.LHS = c.LHS
                            AND a.RHS = c.RHS")
          
          CCS_Basket <- sqldf("select c.*, d.authority_score from  CCS_Basket c  
                            LEFT JOIN ig_authority d
                            ON c.LHS = d.id")
          
          
          CCS_Basket <- sqldf("select c.*, d.closeness from  CCS_Basket c  
                            LEFT JOIN ig_closeness d
                            ON c.LHS = d.id")
          
          
          CCS_Basket <- sqldf("select c.*, d.strength from  CCS_Basket c  
                            LEFT JOIN ig_strength d
                            ON c.LHS = d.id")
          
          CCS_Basket <- sqldf("select c.*, d.coreness from  CCS_Basket c  
                            LEFT JOIN ig_coreness d
                            ON c.LHS = d.id")
          
          
          
          
          CCS_Basket$rule_i <- NULL
          
          CCS_Basket2 <- CCS_Basket
          # remove jaccard from anomolay
          CCS_Basket2$count <- NULL
          
          CCS_Basket2_0 <- CCS_Basket2
          CCS_Basket2_0$rule_index <- 0
          CCS_Basket2_0$LHS <- 0
          CCS_Basket2_0$RHS <- 0
          
          learnname <- colnames(CCS_Basket2_0)
          CCS_Basket2_h2o <- as.h2o(CCS_Basket2_0 )
          
          # change field range to sql for  CCS_Basket2
          
          CCS_Basket2_h2o_dl <- h2o.deeplearning(x = learnname, training_frame = CCS_Basket2_h2o, autoencoder = TRUE, 
                                                 hidden = c(10,2,10), epochs = 100, stopping_tolerance = 1e-4, activation = "Tanh",
                                                 categorical_encoding = "AUTO")
          
          
          
          CCS_Basket2_h2o_dl2 = h2o.anomaly(CCS_Basket2_h2o_dl, CCS_Basket2_h2o)
          
          CCS_Basket2_h2o_dl2 <- as.data.frame(CCS_Basket2_h2o_dl2)
          
          CCS_Basket <- cbind(CCS_Basket ,CCS_Basket2_h2o_dl2)
          names(CCS_Basket)[14] <- "case_mix_MSE"
          
          CCS_Basket <- mutate(CCS_Basket, 
                               Anomaly_rank = ntile(CCS_Basket$case_mix_MSE, 10))
          CCS_Basket <- mutate(CCS_Basket, 
                               Jaccard_rank = ntile(CCS_Basket$tot_rules, 10))
          # select where jacard rank and anomaly both in upper quartile
          
          max_basket <- sqldf("select max(Anomaly_rank) as an_mx, max(Jaccard_rank) as jac_max from CCS_Basket")
          CCS_Basket <- cbind(CCS_Basket,max_basket)
          
          
          # select where jacard rank and anomaly both in upper quartile accounts for ties with max above
          # checks to see that jacard is not all constant
          if (length(unique(CCS_Basket[,"tot_rules"])) != 1) {
            CCS_Basket3 <- sqldf("select * from CCS_Basket where  jac_max = Jaccard_rank
                               and an_mx =Anomaly_rank")}
          
          # if jacard all constant just use MSE anomoly
          if (length(unique(CCS_Basket[,"tot_rules"])) == 1) {
            CCS_Basket3 <- sqldf("select * from CCS_Basket where an_mx =Anomaly_rank")}
          
          
          
          # match anomaly rule to base data
          an_hit1 <- sqldf("select a.CLAIM_ID as CLAIM_ID_x, c.* from ap2 a, CCS_Basket3 c
                         where a.CCS = c.LHS")
          
          an_hit2 <- sqldf("select a.CLAIM_ID as CLAIM_ID_x, c.* from ap2 a, CCS_Basket3 c
                         where a.CCS = c.RHS")
          
          an_hit2 <- rbind(an_hit1, an_hit2)
          
          an_hit2 <- sqldf("select distinct * from an_hit2 ")
          
          an_hit2 <- sqldf("select distinct n.*, a.* from an_hit2 a, an0 as n
                         where a.CLAIM_ID_x = n.CLAIM_ID")
          
          an_hit2$CLAIM_ID_x <- NULL
          an_hit2$rule_index <- NULL
          
          
          
         
          if(NCOL(an_hit2) > 0) {
            outlier_temp_b_an<- bind_rows(an_hit2, outlier_temp_b_an)
            outlier_temp_b_an$Cluster <- cluster2}
          
        }
      }
    }
    
  Cluster1_casemix_summary_df <- outlier_temp_b_an
  Cluster1_casemix_summary_df[is.na(Cluster1_casemix_summary_df)] <- 0
  
  Cluster1_casemix_summary_df <- sqldf("select * from Cluster1_casemix_summary_df order by Anomaly_rank desc")
  

  
  
  ######################  OOOOOOOOOOOOOOOOOOOOOOOOOOOOO
  
  # reformat output files and write out
  outputid <- sqldf("select distinct CLAIM_NO, CLAIM_ID as CLAIM_ID_x from claims_420a ")
  
  output_cluster4_line <- sqldf("select distinct
  Mahalanobis as Score, Mahalanobis_rank as Score_Rank,c.CLAIM_NO,CLAIM_ID,
  PATIENT_ID, DATE_PAID,
  CPT, UNITS_BILLED,AMT_PAID, 
  Max_Units, BaseLine_Median_Units, baseline_units_ratio, baseline_units_delta, CMS_units_ratio, CMS_units_delta,
  BILL_TYPE, CPT_MODIFIER, REVENUE_CODE
  PLACE_OF_SERVICE,
  Congenital_anomalies,
  Diseases_of_the_blood, Diseases_of_the_circulatory_system,
  Diseases_of_the_digestive_system, Diseases_of_the_genitourinary_system, 
  Diseases_of_the_musculoskeletal_system_and_connective_tissue, 
  Diseases_of_the_nervous_system_and_sense_organs, 
  Diseases_of_the_respiratory_system, 
  Diseases_of_the_skin_and_subcutaneous_tissue, 
  Endocrine_metabolic_diseases_immunity_disorder, 
  Infectious_and_parasitic_diseases, Injury_and_poisoning,
  Mental_Illness, Neoplasms, Residual_codes, Symptoms_signs from Cluster4_claim_line_summary_df,outputid c
where  CLAIM_ID = c.CLAIM_ID_x")
  
  
  
  
  output_cluster1_line <- sqldf("select distinct
  Mahalanobis as Score, Mahalanobis_rank as Score_Rank,c.CLAIM_NO,CLAIM_ID,
                                PATIENT_ID, DATE_PAID,
                                CPT, UNITS_BILLED,AMT_PAID, 
                                Max_Units, BaseLine_Median_Units, baseline_units_ratio, baseline_units_delta, CMS_units_ratio, CMS_units_delta,
                                BILL_TYPE, CPT_MODIFIER, REVENUE_CODE
                                PLACE_OF_SERVICE,
                                Congenital_anomalies,
                                Diseases_of_the_blood, Diseases_of_the_circulatory_system,
                                Diseases_of_the_digestive_system, Diseases_of_the_genitourinary_system, 
                                Diseases_of_the_musculoskeletal_system_and_connective_tissue, 
                                Diseases_of_the_nervous_system_and_sense_organs, 
                                Diseases_of_the_respiratory_system, 
                                Diseases_of_the_skin_and_subcutaneous_tissue, 
                                Endocrine_metabolic_diseases_immunity_disorder, 
                                Infectious_and_parasitic_diseases, Injury_and_poisoning,
                                Mental_Illness, Neoplasms, Residual_codes, Symptoms_signs from Cluster1_claim_line_summary_df,outputid c
                                where  CLAIM_ID = c.CLAIM_ID_x")
  
  
  
  ###################
  
  outputid <- sqldf("select distinct CLAIM_NO, CLAIM_ID as CLAIM_ID_x, DATE_PAID from claims_420a ")
  
  output_cluster4_claim <- sqldf("select distinct
  Mahalanobis as Score, Mahalanobis_rank as Score_Rank,c.CLAIM_NO,CLAIM_ID,
                                PATIENT_ID, c.DATE_PAID,
                                CPT, total_units, total_claim_pd, 
                                Max_Units, BaseLine_Median_Units, baseline_units_ratio, baseline_units_delta, CMS_units_ratio, CMS_units_delta,
                                BILL_TYPE, CPT_MODIFIER, REVENUE_CODE
                                PLACE_OF_SERVICE,
                                Congenital_anomalies,
                                Diseases_of_the_blood, Diseases_of_the_circulatory_system,
                                Diseases_of_the_digestive_system, Diseases_of_the_genitourinary_system, 
                                Diseases_of_the_musculoskeletal_system_and_connective_tissue, 
                                Diseases_of_the_nervous_system_and_sense_organs, 
                                Diseases_of_the_respiratory_system, 
                                Diseases_of_the_skin_and_subcutaneous_tissue, 
                                Endocrine_metabolic_diseases_immunity_disorder, 
                                Infectious_and_parasitic_diseases, Injury_and_poisoning,
                                Mental_Illness, Neoplasms, Residual_codes, Symptoms_signs from Cluster4_claim_summary_df,outputid c
                                where  CLAIM_ID = c.CLAIM_ID_x")
  
  
  output_cluster1_claim <- sqldf("select distinct
  Mahalanobis as Score, Mahalanobis_rank as Score_Rank,c.CLAIM_NO,CLAIM_ID,
                                PATIENT_ID, c.DATE_PAID,
                                CPT, total_units, total_claim_pd, 
                                Max_Units, BaseLine_Median_Units, baseline_units_ratio, baseline_units_delta, CMS_units_ratio, CMS_units_delta,
                                BILL_TYPE, CPT_MODIFIER, REVENUE_CODE
                                PLACE_OF_SERVICE,
                                Congenital_anomalies,
                                Diseases_of_the_blood, Diseases_of_the_circulatory_system,
                                Diseases_of_the_digestive_system, Diseases_of_the_genitourinary_system, 
                                Diseases_of_the_musculoskeletal_system_and_connective_tissue, 
                                Diseases_of_the_nervous_system_and_sense_organs, 
                                Diseases_of_the_respiratory_system, 
                                Diseases_of_the_skin_and_subcutaneous_tissue, 
                                Endocrine_metabolic_diseases_immunity_disorder, 
                                Infectious_and_parasitic_diseases, Injury_and_poisoning,
                                Mental_Illness, Neoplasms, Residual_codes, Symptoms_signs from Cluster1_claim_summary_df,outputid c
                                where  CLAIM_ID = c.CLAIM_ID_x")
  
  ##############################
  
  output_cluster1_casemix <- sqldf("select distinct
                                case_mix_MSE as Score, Anomaly_rank as Score_Rank,c.CLAIM_NO,CLAIM_ID,
                                PATIENT_ID, c.DATE_PAID,
                                CPT, total_units,total_claim_pd,
                                BILL_TYPE, CPT_MODIFIER, REVENUE_CODE
                                PLACE_OF_SERVICE,
                                Congenital_anomalies,
                                Diseases_of_the_blood, Diseases_of_the_circulatory_system,
                                Diseases_of_the_digestive_system, Diseases_of_the_genitourinary_system, 
                                Diseases_of_the_musculoskeletal_system_and_connective_tissue, 
                                Diseases_of_the_nervous_system_and_sense_organs, 
                                Diseases_of_the_respiratory_system, 
                                Diseases_of_the_skin_and_subcutaneous_tissue, 
                                Endocrine_metabolic_diseases_immunity_disorder, 
                                Infectious_and_parasitic_diseases, Injury_and_poisoning,
                                Mental_Illness, Neoplasms, Residual_codes, Symptoms_signs from Cluster1_casemix_summary_df,outputid c
                                where  CLAIM_ID = c.CLAIM_ID_x")
  
  
  output_cluster4_casemix <- sqldf("select distinct
                                case_mix_MSE as Score, Anomaly_rank as Score_Rank,c.CLAIM_NO,CLAIM_ID,
                                   PATIENT_ID, c.DATE_PAID,
                                   CPT, total_units,total_claim_pd,
                                   BILL_TYPE, CPT_MODIFIER, REVENUE_CODE
                                   PLACE_OF_SERVICE,
                                   Congenital_anomalies,
                                   Diseases_of_the_blood, Diseases_of_the_circulatory_system,
                                   Diseases_of_the_digestive_system, Diseases_of_the_genitourinary_system, 
                                   Diseases_of_the_musculoskeletal_system_and_connective_tissue, 
                                   Diseases_of_the_nervous_system_and_sense_organs, 
                                   Diseases_of_the_respiratory_system, 
                                   Diseases_of_the_skin_and_subcutaneous_tissue, 
                                   Endocrine_metabolic_diseases_immunity_disorder, 
                                   Infectious_and_parasitic_diseases, Injury_and_poisoning,
                                   Mental_Illness, Neoplasms, Residual_codes, Symptoms_signs from Cluster4_casemix_summary_df,outputid c
                                   where  CLAIM_ID = c.CLAIM_ID_x")
  
  
  # 
  # 
  # write.table(output_cluster4_line, file = "cluster_4_claim_line.csv",
  #             row.names = FALSE, sep ="\t")
  # write.table(output_cluster4_claim, file = "cluster4_claim.csv",
  #             row.names = FALSE, sep ="\t")
  # write.table(output_cluster4_casemix, file = "cluster4_case_mix.csv",
  #             row.names = FALSE, sep ="\t")
  # 
  # write.table(output_cluster1_line, file = "cluster_1_claim_line.csv",
  #             row.names = FALSE, sep ="\t")
  # 
  # write.table( output_cluster1_claim, file = "cluster1claim.csv",
  #             row.names = FALSE, sep ="\t")
  # write.table(output_cluster1_casemix, file = "Cluster1_casemix.csv",
  #             row.names = FALSE, sep ="\t")